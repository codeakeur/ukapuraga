// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package contacting

import (
	"context"
	"gomies/app/core/types/id"
	"sync"
)

// Ensure, that ActionsMock does implement Actions.
// If this is not the case, regenerate this file with moq.
var _ Actions = &ActionsMock{}

// ActionsMock is a mock implementation of Actions.
//
// 	func TestSomethingThatUsesActions(t *testing.T) {
//
// 		// make and configure a mocked Actions
// 		mockedActions := &ActionsMock{
// 			GetAddressFunc: func(contextMoqParam context.Context, external id.External) (Address, error) {
// 				panic("mock out the GetAddress method")
// 			},
// 			GetPhoneFunc: func(contextMoqParam context.Context, external id.External) (Phone, error) {
// 				panic("mock out the GetPhone method")
// 			},
// 			ListAddressesFunc: func(contextMoqParam context.Context, external id.External) ([]Address, error) {
// 				panic("mock out the ListAddresses method")
// 			},
// 			ListPhonesFunc: func(contextMoqParam context.Context, external id.External) ([]Phone, error) {
// 				panic("mock out the ListPhones method")
// 			},
// 			RemoveAddressFunc: func(contextMoqParam context.Context, external id.External) error {
// 				panic("mock out the RemoveAddress method")
// 			},
// 			RemovePhoneFunc: func(contextMoqParam context.Context, external id.External) error {
// 				panic("mock out the RemovePhone method")
// 			},
// 			SaveAddressesFunc: func(contextMoqParam context.Context, addresss ...Address) ([]Address, error) {
// 				panic("mock out the SaveAddresses method")
// 			},
// 			SavePhonesFunc: func(contextMoqParam context.Context, addresss ...Address) ([]Phone, error) {
// 				panic("mock out the SavePhones method")
// 			},
// 		}
//
// 		// use mockedActions in code that requires Actions
// 		// and then make assertions.
//
// 	}
type ActionsMock struct {
	// GetAddressFunc mocks the GetAddress method.
	GetAddressFunc func(contextMoqParam context.Context, external id.External) (Address, error)

	// GetPhoneFunc mocks the GetPhone method.
	GetPhoneFunc func(contextMoqParam context.Context, external id.External) (Phone, error)

	// ListAddressesFunc mocks the ListAddresses method.
	ListAddressesFunc func(contextMoqParam context.Context, external id.External) ([]Address, error)

	// ListPhonesFunc mocks the ListPhones method.
	ListPhonesFunc func(contextMoqParam context.Context, external id.External) ([]Phone, error)

	// RemoveAddressFunc mocks the RemoveAddress method.
	RemoveAddressFunc func(contextMoqParam context.Context, external id.External) error

	// RemovePhoneFunc mocks the RemovePhone method.
	RemovePhoneFunc func(contextMoqParam context.Context, external id.External) error

	// SaveAddressesFunc mocks the SaveAddresses method.
	SaveAddressesFunc func(contextMoqParam context.Context, addresss ...Address) ([]Address, error)

	// SavePhonesFunc mocks the SavePhones method.
	SavePhonesFunc func(contextMoqParam context.Context, addresss ...Address) ([]Phone, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAddress holds details about calls to the GetAddress method.
		GetAddress []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// GetPhone holds details about calls to the GetPhone method.
		GetPhone []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// ListAddresses holds details about calls to the ListAddresses method.
		ListAddresses []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// ListPhones holds details about calls to the ListPhones method.
		ListPhones []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// RemoveAddress holds details about calls to the RemoveAddress method.
		RemoveAddress []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// RemovePhone holds details about calls to the RemovePhone method.
		RemovePhone []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// SaveAddresses holds details about calls to the SaveAddresses method.
		SaveAddresses []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Addresss is the addresss argument value.
			Addresss []Address
		}
		// SavePhones holds details about calls to the SavePhones method.
		SavePhones []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Addresss is the addresss argument value.
			Addresss []Address
		}
	}
	lockGetAddress    sync.RWMutex
	lockGetPhone      sync.RWMutex
	lockListAddresses sync.RWMutex
	lockListPhones    sync.RWMutex
	lockRemoveAddress sync.RWMutex
	lockRemovePhone   sync.RWMutex
	lockSaveAddresses sync.RWMutex
	lockSavePhones    sync.RWMutex
}

// GetAddress calls GetAddressFunc.
func (mock *ActionsMock) GetAddress(contextMoqParam context.Context, external id.External) (Address, error) {
	if mock.GetAddressFunc == nil {
		panic("ActionsMock.GetAddressFunc: method is nil but Actions.GetAddress was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockGetAddress.Lock()
	mock.calls.GetAddress = append(mock.calls.GetAddress, callInfo)
	mock.lockGetAddress.Unlock()
	return mock.GetAddressFunc(contextMoqParam, external)
}

// GetAddressCalls gets all the calls that were made to GetAddress.
// Check the length with:
//     len(mockedActions.GetAddressCalls())
func (mock *ActionsMock) GetAddressCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockGetAddress.RLock()
	calls = mock.calls.GetAddress
	mock.lockGetAddress.RUnlock()
	return calls
}

// GetPhone calls GetPhoneFunc.
func (mock *ActionsMock) GetPhone(contextMoqParam context.Context, external id.External) (Phone, error) {
	if mock.GetPhoneFunc == nil {
		panic("ActionsMock.GetPhoneFunc: method is nil but Actions.GetPhone was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockGetPhone.Lock()
	mock.calls.GetPhone = append(mock.calls.GetPhone, callInfo)
	mock.lockGetPhone.Unlock()
	return mock.GetPhoneFunc(contextMoqParam, external)
}

// GetPhoneCalls gets all the calls that were made to GetPhone.
// Check the length with:
//     len(mockedActions.GetPhoneCalls())
func (mock *ActionsMock) GetPhoneCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockGetPhone.RLock()
	calls = mock.calls.GetPhone
	mock.lockGetPhone.RUnlock()
	return calls
}

// ListAddresses calls ListAddressesFunc.
func (mock *ActionsMock) ListAddresses(contextMoqParam context.Context, external id.External) ([]Address, error) {
	if mock.ListAddressesFunc == nil {
		panic("ActionsMock.ListAddressesFunc: method is nil but Actions.ListAddresses was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockListAddresses.Lock()
	mock.calls.ListAddresses = append(mock.calls.ListAddresses, callInfo)
	mock.lockListAddresses.Unlock()
	return mock.ListAddressesFunc(contextMoqParam, external)
}

// ListAddressesCalls gets all the calls that were made to ListAddresses.
// Check the length with:
//     len(mockedActions.ListAddressesCalls())
func (mock *ActionsMock) ListAddressesCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockListAddresses.RLock()
	calls = mock.calls.ListAddresses
	mock.lockListAddresses.RUnlock()
	return calls
}

// ListPhones calls ListPhonesFunc.
func (mock *ActionsMock) ListPhones(contextMoqParam context.Context, external id.External) ([]Phone, error) {
	if mock.ListPhonesFunc == nil {
		panic("ActionsMock.ListPhonesFunc: method is nil but Actions.ListPhones was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockListPhones.Lock()
	mock.calls.ListPhones = append(mock.calls.ListPhones, callInfo)
	mock.lockListPhones.Unlock()
	return mock.ListPhonesFunc(contextMoqParam, external)
}

// ListPhonesCalls gets all the calls that were made to ListPhones.
// Check the length with:
//     len(mockedActions.ListPhonesCalls())
func (mock *ActionsMock) ListPhonesCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockListPhones.RLock()
	calls = mock.calls.ListPhones
	mock.lockListPhones.RUnlock()
	return calls
}

// RemoveAddress calls RemoveAddressFunc.
func (mock *ActionsMock) RemoveAddress(contextMoqParam context.Context, external id.External) error {
	if mock.RemoveAddressFunc == nil {
		panic("ActionsMock.RemoveAddressFunc: method is nil but Actions.RemoveAddress was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockRemoveAddress.Lock()
	mock.calls.RemoveAddress = append(mock.calls.RemoveAddress, callInfo)
	mock.lockRemoveAddress.Unlock()
	return mock.RemoveAddressFunc(contextMoqParam, external)
}

// RemoveAddressCalls gets all the calls that were made to RemoveAddress.
// Check the length with:
//     len(mockedActions.RemoveAddressCalls())
func (mock *ActionsMock) RemoveAddressCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockRemoveAddress.RLock()
	calls = mock.calls.RemoveAddress
	mock.lockRemoveAddress.RUnlock()
	return calls
}

// RemovePhone calls RemovePhoneFunc.
func (mock *ActionsMock) RemovePhone(contextMoqParam context.Context, external id.External) error {
	if mock.RemovePhoneFunc == nil {
		panic("ActionsMock.RemovePhoneFunc: method is nil but Actions.RemovePhone was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockRemovePhone.Lock()
	mock.calls.RemovePhone = append(mock.calls.RemovePhone, callInfo)
	mock.lockRemovePhone.Unlock()
	return mock.RemovePhoneFunc(contextMoqParam, external)
}

// RemovePhoneCalls gets all the calls that were made to RemovePhone.
// Check the length with:
//     len(mockedActions.RemovePhoneCalls())
func (mock *ActionsMock) RemovePhoneCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockRemovePhone.RLock()
	calls = mock.calls.RemovePhone
	mock.lockRemovePhone.RUnlock()
	return calls
}

// SaveAddresses calls SaveAddressesFunc.
func (mock *ActionsMock) SaveAddresses(contextMoqParam context.Context, addresss ...Address) ([]Address, error) {
	if mock.SaveAddressesFunc == nil {
		panic("ActionsMock.SaveAddressesFunc: method is nil but Actions.SaveAddresses was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Addresss        []Address
	}{
		ContextMoqParam: contextMoqParam,
		Addresss:        addresss,
	}
	mock.lockSaveAddresses.Lock()
	mock.calls.SaveAddresses = append(mock.calls.SaveAddresses, callInfo)
	mock.lockSaveAddresses.Unlock()
	return mock.SaveAddressesFunc(contextMoqParam, addresss...)
}

// SaveAddressesCalls gets all the calls that were made to SaveAddresses.
// Check the length with:
//     len(mockedActions.SaveAddressesCalls())
func (mock *ActionsMock) SaveAddressesCalls() []struct {
	ContextMoqParam context.Context
	Addresss        []Address
} {
	var calls []struct {
		ContextMoqParam context.Context
		Addresss        []Address
	}
	mock.lockSaveAddresses.RLock()
	calls = mock.calls.SaveAddresses
	mock.lockSaveAddresses.RUnlock()
	return calls
}

// SavePhones calls SavePhonesFunc.
func (mock *ActionsMock) SavePhones(contextMoqParam context.Context, addresss ...Address) ([]Phone, error) {
	if mock.SavePhonesFunc == nil {
		panic("ActionsMock.SavePhonesFunc: method is nil but Actions.SavePhones was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Addresss        []Address
	}{
		ContextMoqParam: contextMoqParam,
		Addresss:        addresss,
	}
	mock.lockSavePhones.Lock()
	mock.calls.SavePhones = append(mock.calls.SavePhones, callInfo)
	mock.lockSavePhones.Unlock()
	return mock.SavePhonesFunc(contextMoqParam, addresss...)
}

// SavePhonesCalls gets all the calls that were made to SavePhones.
// Check the length with:
//     len(mockedActions.SavePhonesCalls())
func (mock *ActionsMock) SavePhonesCalls() []struct {
	ContextMoqParam context.Context
	Addresss        []Address
} {
	var calls []struct {
		ContextMoqParam context.Context
		Addresss        []Address
	}
	mock.lockSavePhones.RLock()
	calls = mock.calls.SavePhones
	mock.lockSavePhones.RUnlock()
	return calls
}

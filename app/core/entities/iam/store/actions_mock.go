// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package store

import (
	"context"
	"gomies/pkg/sdk/types"
	"sync"
)

// Ensure, that ActionsMock does implement Actions.
// If this is not the case, regenerate this file with moq.
var _ Actions = &ActionsMock{}

// ActionsMock is a mock implementation of Actions.
//
// 	func TestSomethingThatUsesActions(t *testing.T) {
//
// 		// make and configure a mocked Actions
// 		mockedActions := &ActionsMock{
// 			GetFunc: func(ctx context.Context, storeID Key) (Store, error) {
// 				panic("mock out the Get method")
// 			},
// 			ListFunc: func(ctx context.Context, storeFilter Filter) ([]Store, error) {
// 				panic("mock out the List method")
// 			},
// 			ListPreferencesFunc: func(ctx context.Context, storeKey Key, modules ...string) (types.Preferences, error) {
// 				panic("mock out the ListPreferences method")
// 			},
// 			RemoveFunc: func(ctx context.Context, key Key) error {
// 				panic("mock out the Remove method")
// 			},
// 			SaveFunc: func(ctx context.Context, st Store) (Store, error) {
// 				panic("mock out the Save method")
// 			},
// 			SavePreferencesFunc: func(ctx context.Context, storeKey Key, pref types.Preferences) (types.Preferences, error) {
// 				panic("mock out the SavePreferences method")
// 			},
// 		}
//
// 		// use mockedActions in code that requires Actions
// 		// and then make assertions.
//
// 	}
type ActionsMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, storeID Key) (Store, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, storeFilter Filter) ([]Store, error)

	// ListPreferencesFunc mocks the ListPreferences method.
	ListPreferencesFunc func(ctx context.Context, storeKey Key, modules ...string) (types.Preferences, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, key Key) error

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, st Store) (Store, error)

	// SavePreferencesFunc mocks the SavePreferences method.
	SavePreferencesFunc func(ctx context.Context, storeKey Key, pref types.Preferences) (types.Preferences, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StoreID is the storeID argument value.
			StoreID Key
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StoreFilter is the storeFilter argument value.
			StoreFilter Filter
		}
		// ListPreferences holds details about calls to the ListPreferences method.
		ListPreferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StoreKey is the storeKey argument value.
			StoreKey Key
			// Modules is the modules argument value.
			Modules []string
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// St is the st argument value.
			St Store
		}
		// SavePreferences holds details about calls to the SavePreferences method.
		SavePreferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StoreKey is the storeKey argument value.
			StoreKey Key
			// Pref is the pref argument value.
			Pref types.Preferences
		}
	}
	lockGet             sync.RWMutex
	lockList            sync.RWMutex
	lockListPreferences sync.RWMutex
	lockRemove          sync.RWMutex
	lockSave            sync.RWMutex
	lockSavePreferences sync.RWMutex
}

// Get calls GetFunc.
func (mock *ActionsMock) Get(ctx context.Context, storeID Key) (Store, error) {
	if mock.GetFunc == nil {
		panic("ActionsMock.GetFunc: method is nil but Actions.Get was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		StoreID Key
	}{
		Ctx:     ctx,
		StoreID: storeID,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, storeID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedActions.GetCalls())
func (mock *ActionsMock) GetCalls() []struct {
	Ctx     context.Context
	StoreID Key
} {
	var calls []struct {
		Ctx     context.Context
		StoreID Key
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ActionsMock) List(ctx context.Context, storeFilter Filter) ([]Store, error) {
	if mock.ListFunc == nil {
		panic("ActionsMock.ListFunc: method is nil but Actions.List was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		StoreFilter Filter
	}{
		Ctx:         ctx,
		StoreFilter: storeFilter,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, storeFilter)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedActions.ListCalls())
func (mock *ActionsMock) ListCalls() []struct {
	Ctx         context.Context
	StoreFilter Filter
} {
	var calls []struct {
		Ctx         context.Context
		StoreFilter Filter
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListPreferences calls ListPreferencesFunc.
func (mock *ActionsMock) ListPreferences(ctx context.Context, storeKey Key, modules ...string) (types.Preferences, error) {
	if mock.ListPreferencesFunc == nil {
		panic("ActionsMock.ListPreferencesFunc: method is nil but Actions.ListPreferences was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		StoreKey Key
		Modules  []string
	}{
		Ctx:      ctx,
		StoreKey: storeKey,
		Modules:  modules,
	}
	mock.lockListPreferences.Lock()
	mock.calls.ListPreferences = append(mock.calls.ListPreferences, callInfo)
	mock.lockListPreferences.Unlock()
	return mock.ListPreferencesFunc(ctx, storeKey, modules...)
}

// ListPreferencesCalls gets all the calls that were made to ListPreferences.
// Check the length with:
//     len(mockedActions.ListPreferencesCalls())
func (mock *ActionsMock) ListPreferencesCalls() []struct {
	Ctx      context.Context
	StoreKey Key
	Modules  []string
} {
	var calls []struct {
		Ctx      context.Context
		StoreKey Key
		Modules  []string
	}
	mock.lockListPreferences.RLock()
	calls = mock.calls.ListPreferences
	mock.lockListPreferences.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *ActionsMock) Remove(ctx context.Context, key Key) error {
	if mock.RemoveFunc == nil {
		panic("ActionsMock.RemoveFunc: method is nil but Actions.Remove was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, key)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedActions.RemoveCalls())
func (mock *ActionsMock) RemoveCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ActionsMock) Save(ctx context.Context, st Store) (Store, error) {
	if mock.SaveFunc == nil {
		panic("ActionsMock.SaveFunc: method is nil but Actions.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		St  Store
	}{
		Ctx: ctx,
		St:  st,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, st)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedActions.SaveCalls())
func (mock *ActionsMock) SaveCalls() []struct {
	Ctx context.Context
	St  Store
} {
	var calls []struct {
		Ctx context.Context
		St  Store
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// SavePreferences calls SavePreferencesFunc.
func (mock *ActionsMock) SavePreferences(ctx context.Context, storeKey Key, pref types.Preferences) (types.Preferences, error) {
	if mock.SavePreferencesFunc == nil {
		panic("ActionsMock.SavePreferencesFunc: method is nil but Actions.SavePreferences was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		StoreKey Key
		Pref     types.Preferences
	}{
		Ctx:      ctx,
		StoreKey: storeKey,
		Pref:     pref,
	}
	mock.lockSavePreferences.Lock()
	mock.calls.SavePreferences = append(mock.calls.SavePreferences, callInfo)
	mock.lockSavePreferences.Unlock()
	return mock.SavePreferencesFunc(ctx, storeKey, pref)
}

// SavePreferencesCalls gets all the calls that were made to SavePreferences.
// Check the length with:
//     len(mockedActions.SavePreferencesCalls())
func (mock *ActionsMock) SavePreferencesCalls() []struct {
	Ctx      context.Context
	StoreKey Key
	Pref     types.Preferences
} {
	var calls []struct {
		Ctx      context.Context
		StoreKey Key
		Pref     types.Preferences
	}
	mock.lockSavePreferences.RLock()
	calls = mock.calls.SavePreferences
	mock.lockSavePreferences.RUnlock()
	return calls
}

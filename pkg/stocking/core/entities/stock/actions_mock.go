// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package stock

import (
	"context"
	"gomies/pkg/sdk/types"
	"sync"
)

// Ensure, that ActionsMock does implement Actions.
// If this is not the case, regenerate this file with moq.
var _ Actions = &ActionsMock{}

// ActionsMock is a mock implementation of Actions.
//
// 	func TestSomethingThatUsesActions(t *testing.T) {
//
// 		// make and configure a mocked Actions
// 		mockedActions := &ActionsMock{
// 			AddToStockFunc: func(ctx context.Context, target types.External, mov Movement) (Movement, error) {
// 				panic("mock out the AddToStock method")
// 			},
// 			ComputeStockFunc: func(ctx context.Context, target types.External, stockFilter Filter) (Actual, error) {
// 				panic("mock out the ComputeStock method")
// 			},
// 			GetMovementFunc: func(ctx context.Context, target types.External, movementID types.External) (Movement, error) {
// 				panic("mock out the GetMovement method")
// 			},
// 			ListMovementsFunc: func(ctx context.Context, target types.External, stockFilter Filter) ([]Movement, error) {
// 				panic("mock out the ListMovements method")
// 			},
// 			RemoveFromStockFunc: func(ctx context.Context, target types.External, movementID types.External) error {
// 				panic("mock out the RemoveFromStock method")
// 			},
// 		}
//
// 		// use mockedActions in code that requires Actions
// 		// and then make assertions.
//
// 	}
type ActionsMock struct {
	// AddToStockFunc mocks the AddToStock method.
	AddToStockFunc func(ctx context.Context, target types.External, mov Movement) (Movement, error)

	// ComputeStockFunc mocks the ComputeStock method.
	ComputeStockFunc func(ctx context.Context, target types.External, stockFilter Filter) (Actual, error)

	// GetMovementFunc mocks the GetMovement method.
	GetMovementFunc func(ctx context.Context, target types.External, movementID types.External) (Movement, error)

	// ListMovementsFunc mocks the ListMovements method.
	ListMovementsFunc func(ctx context.Context, target types.External, stockFilter Filter) ([]Movement, error)

	// RemoveFromStockFunc mocks the RemoveFromStock method.
	RemoveFromStockFunc func(ctx context.Context, target types.External, movementID types.External) error

	// calls tracks calls to the methods.
	calls struct {
		// AddToStock holds details about calls to the AddToStock method.
		AddToStock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Target is the target argument value.
			Target types.External
			// Mov is the mov argument value.
			Mov Movement
		}
		// ComputeStock holds details about calls to the ComputeStock method.
		ComputeStock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Target is the target argument value.
			Target types.External
			// StockFilter is the stockFilter argument value.
			StockFilter Filter
		}
		// GetMovement holds details about calls to the GetMovement method.
		GetMovement []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Target is the target argument value.
			Target types.External
			// MovementID is the movementID argument value.
			MovementID types.External
		}
		// ListMovements holds details about calls to the ListMovements method.
		ListMovements []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Target is the target argument value.
			Target types.External
			// StockFilter is the stockFilter argument value.
			StockFilter Filter
		}
		// RemoveFromStock holds details about calls to the RemoveFromStock method.
		RemoveFromStock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Target is the target argument value.
			Target types.External
			// MovementID is the movementID argument value.
			MovementID types.External
		}
	}
	lockAddToStock      sync.RWMutex
	lockComputeStock    sync.RWMutex
	lockGetMovement     sync.RWMutex
	lockListMovements   sync.RWMutex
	lockRemoveFromStock sync.RWMutex
}

// AddToStock calls AddToStockFunc.
func (mock *ActionsMock) AddToStock(ctx context.Context, target types.External, mov Movement) (Movement, error) {
	if mock.AddToStockFunc == nil {
		panic("ActionsMock.AddToStockFunc: method is nil but Actions.AddToStock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Target types.External
		Mov    Movement
	}{
		Ctx:    ctx,
		Target: target,
		Mov:    mov,
	}
	mock.lockAddToStock.Lock()
	mock.calls.AddToStock = append(mock.calls.AddToStock, callInfo)
	mock.lockAddToStock.Unlock()
	return mock.AddToStockFunc(ctx, target, mov)
}

// AddToStockCalls gets all the calls that were made to AddToStock.
// Check the length with:
//     len(mockedActions.AddToStockCalls())
func (mock *ActionsMock) AddToStockCalls() []struct {
	Ctx    context.Context
	Target types.External
	Mov    Movement
} {
	var calls []struct {
		Ctx    context.Context
		Target types.External
		Mov    Movement
	}
	mock.lockAddToStock.RLock()
	calls = mock.calls.AddToStock
	mock.lockAddToStock.RUnlock()
	return calls
}

// ComputeStock calls ComputeStockFunc.
func (mock *ActionsMock) ComputeStock(ctx context.Context, target types.External, stockFilter Filter) (Actual, error) {
	if mock.ComputeStockFunc == nil {
		panic("ActionsMock.ComputeStockFunc: method is nil but Actions.ComputeStock was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Target      types.External
		StockFilter Filter
	}{
		Ctx:         ctx,
		Target:      target,
		StockFilter: stockFilter,
	}
	mock.lockComputeStock.Lock()
	mock.calls.ComputeStock = append(mock.calls.ComputeStock, callInfo)
	mock.lockComputeStock.Unlock()
	return mock.ComputeStockFunc(ctx, target, stockFilter)
}

// ComputeStockCalls gets all the calls that were made to ComputeStock.
// Check the length with:
//     len(mockedActions.ComputeStockCalls())
func (mock *ActionsMock) ComputeStockCalls() []struct {
	Ctx         context.Context
	Target      types.External
	StockFilter Filter
} {
	var calls []struct {
		Ctx         context.Context
		Target      types.External
		StockFilter Filter
	}
	mock.lockComputeStock.RLock()
	calls = mock.calls.ComputeStock
	mock.lockComputeStock.RUnlock()
	return calls
}

// GetMovement calls GetMovementFunc.
func (mock *ActionsMock) GetMovement(ctx context.Context, target types.External, movementID types.External) (Movement, error) {
	if mock.GetMovementFunc == nil {
		panic("ActionsMock.GetMovementFunc: method is nil but Actions.GetMovement was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Target     types.External
		MovementID types.External
	}{
		Ctx:        ctx,
		Target:     target,
		MovementID: movementID,
	}
	mock.lockGetMovement.Lock()
	mock.calls.GetMovement = append(mock.calls.GetMovement, callInfo)
	mock.lockGetMovement.Unlock()
	return mock.GetMovementFunc(ctx, target, movementID)
}

// GetMovementCalls gets all the calls that were made to GetMovement.
// Check the length with:
//     len(mockedActions.GetMovementCalls())
func (mock *ActionsMock) GetMovementCalls() []struct {
	Ctx        context.Context
	Target     types.External
	MovementID types.External
} {
	var calls []struct {
		Ctx        context.Context
		Target     types.External
		MovementID types.External
	}
	mock.lockGetMovement.RLock()
	calls = mock.calls.GetMovement
	mock.lockGetMovement.RUnlock()
	return calls
}

// ListMovements calls ListMovementsFunc.
func (mock *ActionsMock) ListMovements(ctx context.Context, target types.External, stockFilter Filter) ([]Movement, error) {
	if mock.ListMovementsFunc == nil {
		panic("ActionsMock.ListMovementsFunc: method is nil but Actions.ListMovements was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Target      types.External
		StockFilter Filter
	}{
		Ctx:         ctx,
		Target:      target,
		StockFilter: stockFilter,
	}
	mock.lockListMovements.Lock()
	mock.calls.ListMovements = append(mock.calls.ListMovements, callInfo)
	mock.lockListMovements.Unlock()
	return mock.ListMovementsFunc(ctx, target, stockFilter)
}

// ListMovementsCalls gets all the calls that were made to ListMovements.
// Check the length with:
//     len(mockedActions.ListMovementsCalls())
func (mock *ActionsMock) ListMovementsCalls() []struct {
	Ctx         context.Context
	Target      types.External
	StockFilter Filter
} {
	var calls []struct {
		Ctx         context.Context
		Target      types.External
		StockFilter Filter
	}
	mock.lockListMovements.RLock()
	calls = mock.calls.ListMovements
	mock.lockListMovements.RUnlock()
	return calls
}

// RemoveFromStock calls RemoveFromStockFunc.
func (mock *ActionsMock) RemoveFromStock(ctx context.Context, target types.External, movementID types.External) error {
	if mock.RemoveFromStockFunc == nil {
		panic("ActionsMock.RemoveFromStockFunc: method is nil but Actions.RemoveFromStock was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Target     types.External
		MovementID types.External
	}{
		Ctx:        ctx,
		Target:     target,
		MovementID: movementID,
	}
	mock.lockRemoveFromStock.Lock()
	mock.calls.RemoveFromStock = append(mock.calls.RemoveFromStock, callInfo)
	mock.lockRemoveFromStock.Unlock()
	return mock.RemoveFromStockFunc(ctx, target, movementID)
}

// RemoveFromStockCalls gets all the calls that were made to RemoveFromStock.
// Check the length with:
//     len(mockedActions.RemoveFromStockCalls())
func (mock *ActionsMock) RemoveFromStockCalls() []struct {
	Ctx        context.Context
	Target     types.External
	MovementID types.External
} {
	var calls []struct {
		Ctx        context.Context
		Target     types.External
		MovementID types.External
	}
	mock.lockRemoveFromStock.RLock()
	calls = mock.calls.RemoveFromStock
	mock.lockRemoveFromStock.RUnlock()
	return calls
}

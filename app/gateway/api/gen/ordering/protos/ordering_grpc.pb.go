// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: ordering/ordering.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderingClient is the client API for Ordering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderingClient interface {
	RequestOrderTicket(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RequestOrderTicketResponse, error)
	AddToOrder(ctx context.Context, in *AddToOrderRequest, opts ...grpc.CallOption) (*AddToOrderResponse, error)
	Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	SetOrderDeliveryMode(ctx context.Context, in *SetOrderDeliveryModeRequest, opts ...grpc.CallOption) (*Empty, error)
	SetOrderStatus(ctx context.Context, in *SetOrderStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	SetItemStatus(ctx context.Context, in *SetItemStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*Empty, error)
	ListOrdersInFlow(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Ordering_ListOrdersInFlowClient, error)
}

type orderingClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderingClient(cc grpc.ClientConnInterface) OrderingClient {
	return &orderingClient{cc}
}

func (c *orderingClient) RequestOrderTicket(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RequestOrderTicketResponse, error) {
	out := new(RequestOrderTicketResponse)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/RequestOrderTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) AddToOrder(ctx context.Context, in *AddToOrderRequest, opts ...grpc.CallOption) (*AddToOrderResponse, error) {
	out := new(AddToOrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/AddToOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) SetOrderDeliveryMode(ctx context.Context, in *SetOrderDeliveryModeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/SetOrderDeliveryMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) SetOrderStatus(ctx context.Context, in *SetOrderStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/SetOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) SetItemStatus(ctx context.Context, in *SetItemStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/SetItemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/ListItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error) {
	out := new(GetOrderByIdResponse)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ordering.Ordering/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) ListOrdersInFlow(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Ordering_ListOrdersInFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ordering_ServiceDesc.Streams[0], "/ordering.Ordering/ListOrdersInFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderingListOrdersInFlowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ordering_ListOrdersInFlowClient interface {
	Recv() (*ListOrdersInFlowResponse, error)
	grpc.ClientStream
}

type orderingListOrdersInFlowClient struct {
	grpc.ClientStream
}

func (x *orderingListOrdersInFlowClient) Recv() (*ListOrdersInFlowResponse, error) {
	m := new(ListOrdersInFlowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderingServer is the server API for Ordering service.
// All implementations must embed UnimplementedOrderingServer
// for forward compatibility
type OrderingServer interface {
	RequestOrderTicket(context.Context, *Empty) (*RequestOrderTicketResponse, error)
	AddToOrder(context.Context, *AddToOrderRequest) (*AddToOrderResponse, error)
	Order(context.Context, *OrderRequest) (*OrderResponse, error)
	SetOrderDeliveryMode(context.Context, *SetOrderDeliveryModeRequest) (*Empty, error)
	SetOrderStatus(context.Context, *SetOrderStatusRequest) (*Empty, error)
	SetItemStatus(context.Context, *SetItemStatusRequest) (*Empty, error)
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*Empty, error)
	ListOrdersInFlow(*Empty, Ordering_ListOrdersInFlowServer) error
	mustEmbedUnimplementedOrderingServer()
}

// UnimplementedOrderingServer must be embedded to have forward compatible implementations.
type UnimplementedOrderingServer struct {
}

func (UnimplementedOrderingServer) RequestOrderTicket(context.Context, *Empty) (*RequestOrderTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOrderTicket not implemented")
}
func (UnimplementedOrderingServer) AddToOrder(context.Context, *AddToOrderRequest) (*AddToOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToOrder not implemented")
}
func (UnimplementedOrderingServer) Order(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedOrderingServer) SetOrderDeliveryMode(context.Context, *SetOrderDeliveryModeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderDeliveryMode not implemented")
}
func (UnimplementedOrderingServer) SetOrderStatus(context.Context, *SetOrderStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderStatus not implemented")
}
func (UnimplementedOrderingServer) SetItemStatus(context.Context, *SetItemStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetItemStatus not implemented")
}
func (UnimplementedOrderingServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedOrderingServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedOrderingServer) GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderingServer) CancelOrder(context.Context, *CancelOrderRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderingServer) ListOrdersInFlow(*Empty, Ordering_ListOrdersInFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOrdersInFlow not implemented")
}
func (UnimplementedOrderingServer) mustEmbedUnimplementedOrderingServer() {}

// UnsafeOrderingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderingServer will
// result in compilation errors.
type UnsafeOrderingServer interface {
	mustEmbedUnimplementedOrderingServer()
}

func RegisterOrderingServer(s grpc.ServiceRegistrar, srv OrderingServer) {
	s.RegisterService(&Ordering_ServiceDesc, srv)
}

func _Ordering_RequestOrderTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).RequestOrderTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/RequestOrderTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).RequestOrderTicket(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_AddToOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).AddToOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/AddToOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).AddToOrder(ctx, req.(*AddToOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).Order(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_SetOrderDeliveryMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderDeliveryModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).SetOrderDeliveryMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/SetOrderDeliveryMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).SetOrderDeliveryMode(ctx, req.(*SetOrderDeliveryModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_SetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).SetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/SetOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).SetOrderStatus(ctx, req.(*SetOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_SetItemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetItemStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).SetItemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/SetItemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).SetItemStatus(ctx, req.(*SetItemStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/ListItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).GetOrderById(ctx, req.(*GetOrderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Ordering/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_ListOrdersInFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderingServer).ListOrdersInFlow(m, &orderingListOrdersInFlowServer{stream})
}

type Ordering_ListOrdersInFlowServer interface {
	Send(*ListOrdersInFlowResponse) error
	grpc.ServerStream
}

type orderingListOrdersInFlowServer struct {
	grpc.ServerStream
}

func (x *orderingListOrdersInFlowServer) Send(m *ListOrdersInFlowResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Ordering_ServiceDesc is the grpc.ServiceDesc for Ordering service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ordering_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ordering.Ordering",
	HandlerType: (*OrderingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestOrderTicket",
			Handler:    _Ordering_RequestOrderTicket_Handler,
		},
		{
			MethodName: "AddToOrder",
			Handler:    _Ordering_AddToOrder_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Ordering_Order_Handler,
		},
		{
			MethodName: "SetOrderDeliveryMode",
			Handler:    _Ordering_SetOrderDeliveryMode_Handler,
		},
		{
			MethodName: "SetOrderStatus",
			Handler:    _Ordering_SetOrderStatus_Handler,
		},
		{
			MethodName: "SetItemStatus",
			Handler:    _Ordering_SetItemStatus_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _Ordering_ListOrders_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _Ordering_ListItems_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _Ordering_GetOrderById_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Ordering_CancelOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListOrdersInFlow",
			Handler:       _Ordering_ListOrdersInFlow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ordering/ordering.proto",
}

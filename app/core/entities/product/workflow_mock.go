// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package product

import (
	"context"
	"gomies/app/core/entities/stock"
	"gomies/app/core/types/id"
	"sync"
)

// Ensure, that WorkflowMock does implement Workflow.
// If this is not the case, regenerate this file with moq.
var _ Workflow = &WorkflowMock{}

// WorkflowMock is a mock implementation of Workflow.
//
// 	func TestSomethingThatUsesWorkflow(t *testing.T) {
//
// 		// make and configure a mocked Workflow
// 		mockedWorkflow := &WorkflowMock{
// 			AddToStockFunc: func(contextMoqParam context.Context, movement stock.Movement) (stock.Movement, error) {
// 				panic("mock out the AddToStock method")
// 			},
// 			CreateFunc: func(contextMoqParam context.Context, product Product) (Product, error) {
// 				panic("mock out the Create method")
// 			},
// 			GetFunc: func(contextMoqParam context.Context, external id.External) (Product, error) {
// 				panic("mock out the Get method")
// 			},
// 			ListFunc: func(contextMoqParam context.Context, filter Filter) ([]Product, error) {
// 				panic("mock out the List method")
// 			},
// 			ListStockFunc: func(contextMoqParam context.Context, filter stock.Filter) ([]stock.Movement, error) {
// 				panic("mock out the ListStock method")
// 			},
// 			RemoveFunc: func(contextMoqParam context.Context, external id.External) error {
// 				panic("mock out the Remove method")
// 			},
// 			RemoveFromStockFunc: func(contextMoqParam context.Context, external id.External) error {
// 				panic("mock out the RemoveFromStock method")
// 			},
// 			UpdateFunc: func(contextMoqParam context.Context, product Product) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedWorkflow in code that requires Workflow
// 		// and then make assertions.
//
// 	}
type WorkflowMock struct {
	// AddToStockFunc mocks the AddToStock method.
	AddToStockFunc func(contextMoqParam context.Context, movement stock.Movement) (stock.Movement, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(contextMoqParam context.Context, product Product) (Product, error)

	// GetFunc mocks the Get method.
	GetFunc func(contextMoqParam context.Context, external id.External) (Product, error)

	// ListFunc mocks the List method.
	ListFunc func(contextMoqParam context.Context, filter Filter) ([]Product, error)

	// ListStockFunc mocks the ListStock method.
	ListStockFunc func(contextMoqParam context.Context, filter stock.Filter) ([]stock.Movement, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(contextMoqParam context.Context, external id.External) error

	// RemoveFromStockFunc mocks the RemoveFromStock method.
	RemoveFromStockFunc func(contextMoqParam context.Context, external id.External) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(contextMoqParam context.Context, product Product) error

	// calls tracks calls to the methods.
	calls struct {
		// AddToStock holds details about calls to the AddToStock method.
		AddToStock []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Movement is the movement argument value.
			Movement stock.Movement
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Product is the product argument value.
			Product Product
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// List holds details about calls to the List method.
		List []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Filter is the filter argument value.
			Filter Filter
		}
		// ListStock holds details about calls to the ListStock method.
		ListStock []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Filter is the filter argument value.
			Filter stock.Filter
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// RemoveFromStock holds details about calls to the RemoveFromStock method.
		RemoveFromStock []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Product is the product argument value.
			Product Product
		}
	}
	lockAddToStock      sync.RWMutex
	lockCreate          sync.RWMutex
	lockGet             sync.RWMutex
	lockList            sync.RWMutex
	lockListStock       sync.RWMutex
	lockRemove          sync.RWMutex
	lockRemoveFromStock sync.RWMutex
	lockUpdate          sync.RWMutex
}

// AddToStock calls AddToStockFunc.
func (mock *WorkflowMock) AddToStock(contextMoqParam context.Context, movement stock.Movement) (stock.Movement, error) {
	if mock.AddToStockFunc == nil {
		panic("WorkflowMock.AddToStockFunc: method is nil but Workflow.AddToStock was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Movement        stock.Movement
	}{
		ContextMoqParam: contextMoqParam,
		Movement:        movement,
	}
	mock.lockAddToStock.Lock()
	mock.calls.AddToStock = append(mock.calls.AddToStock, callInfo)
	mock.lockAddToStock.Unlock()
	return mock.AddToStockFunc(contextMoqParam, movement)
}

// AddToStockCalls gets all the calls that were made to AddToStock.
// Check the length with:
//     len(mockedWorkflow.AddToStockCalls())
func (mock *WorkflowMock) AddToStockCalls() []struct {
	ContextMoqParam context.Context
	Movement        stock.Movement
} {
	var calls []struct {
		ContextMoqParam context.Context
		Movement        stock.Movement
	}
	mock.lockAddToStock.RLock()
	calls = mock.calls.AddToStock
	mock.lockAddToStock.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *WorkflowMock) Create(contextMoqParam context.Context, product Product) (Product, error) {
	if mock.CreateFunc == nil {
		panic("WorkflowMock.CreateFunc: method is nil but Workflow.Create was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Product         Product
	}{
		ContextMoqParam: contextMoqParam,
		Product:         product,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(contextMoqParam, product)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedWorkflow.CreateCalls())
func (mock *WorkflowMock) CreateCalls() []struct {
	ContextMoqParam context.Context
	Product         Product
} {
	var calls []struct {
		ContextMoqParam context.Context
		Product         Product
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *WorkflowMock) Get(contextMoqParam context.Context, external id.External) (Product, error) {
	if mock.GetFunc == nil {
		panic("WorkflowMock.GetFunc: method is nil but Workflow.Get was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(contextMoqParam, external)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedWorkflow.GetCalls())
func (mock *WorkflowMock) GetCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *WorkflowMock) List(contextMoqParam context.Context, filter Filter) ([]Product, error) {
	if mock.ListFunc == nil {
		panic("WorkflowMock.ListFunc: method is nil but Workflow.List was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Filter          Filter
	}{
		ContextMoqParam: contextMoqParam,
		Filter:          filter,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(contextMoqParam, filter)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedWorkflow.ListCalls())
func (mock *WorkflowMock) ListCalls() []struct {
	ContextMoqParam context.Context
	Filter          Filter
} {
	var calls []struct {
		ContextMoqParam context.Context
		Filter          Filter
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListStock calls ListStockFunc.
func (mock *WorkflowMock) ListStock(contextMoqParam context.Context, filter stock.Filter) ([]stock.Movement, error) {
	if mock.ListStockFunc == nil {
		panic("WorkflowMock.ListStockFunc: method is nil but Workflow.ListStock was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Filter          stock.Filter
	}{
		ContextMoqParam: contextMoqParam,
		Filter:          filter,
	}
	mock.lockListStock.Lock()
	mock.calls.ListStock = append(mock.calls.ListStock, callInfo)
	mock.lockListStock.Unlock()
	return mock.ListStockFunc(contextMoqParam, filter)
}

// ListStockCalls gets all the calls that were made to ListStock.
// Check the length with:
//     len(mockedWorkflow.ListStockCalls())
func (mock *WorkflowMock) ListStockCalls() []struct {
	ContextMoqParam context.Context
	Filter          stock.Filter
} {
	var calls []struct {
		ContextMoqParam context.Context
		Filter          stock.Filter
	}
	mock.lockListStock.RLock()
	calls = mock.calls.ListStock
	mock.lockListStock.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *WorkflowMock) Remove(contextMoqParam context.Context, external id.External) error {
	if mock.RemoveFunc == nil {
		panic("WorkflowMock.RemoveFunc: method is nil but Workflow.Remove was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(contextMoqParam, external)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedWorkflow.RemoveCalls())
func (mock *WorkflowMock) RemoveCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// RemoveFromStock calls RemoveFromStockFunc.
func (mock *WorkflowMock) RemoveFromStock(contextMoqParam context.Context, external id.External) error {
	if mock.RemoveFromStockFunc == nil {
		panic("WorkflowMock.RemoveFromStockFunc: method is nil but Workflow.RemoveFromStock was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockRemoveFromStock.Lock()
	mock.calls.RemoveFromStock = append(mock.calls.RemoveFromStock, callInfo)
	mock.lockRemoveFromStock.Unlock()
	return mock.RemoveFromStockFunc(contextMoqParam, external)
}

// RemoveFromStockCalls gets all the calls that were made to RemoveFromStock.
// Check the length with:
//     len(mockedWorkflow.RemoveFromStockCalls())
func (mock *WorkflowMock) RemoveFromStockCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockRemoveFromStock.RLock()
	calls = mock.calls.RemoveFromStock
	mock.lockRemoveFromStock.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *WorkflowMock) Update(contextMoqParam context.Context, product Product) error {
	if mock.UpdateFunc == nil {
		panic("WorkflowMock.UpdateFunc: method is nil but Workflow.Update was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Product         Product
	}{
		ContextMoqParam: contextMoqParam,
		Product:         product,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(contextMoqParam, product)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedWorkflow.UpdateCalls())
func (mock *WorkflowMock) UpdateCalls() []struct {
	ContextMoqParam context.Context
	Product         Product
} {
	var calls []struct {
		ContextMoqParam context.Context
		Product         Product
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

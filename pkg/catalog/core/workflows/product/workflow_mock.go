// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package product

import (
	"context"
	"gomies/pkg/catalog/core/entities/product"
	"gomies/pkg/sdk/types"
	"gomies/pkg/stocking/core/entities/stock"
	"sync"
)

// Ensure, that WorkflowMock does implement Workflow.
// If this is not the case, regenerate this file with moq.
var _ Workflow = &WorkflowMock{}

// WorkflowMock is a mock implementation of Workflow.
//
// 	func TestSomethingThatUsesWorkflow(t *testing.T) {
//
// 		// make and configure a mocked Workflow
// 		mockedWorkflow := &WorkflowMock{
// 			AddIngredientFunc: func(ctx context.Context, productKey product.Key, ingredient product.Ingredient) (product.Ingredient, error) {
// 				panic("mock out the AddIngredient method")
// 			},
// 			AddToStockFunc: func(ctx context.Context, productID product.Key, mov stock.Movement) (product.StockAdditionResult, error) {
// 				panic("mock out the AddToStock method")
// 			},
// 			ApproveSaleFunc: func(ctx context.Context, req product.ApproveSaleRequest) error {
// 				panic("mock out the ApproveSale method")
// 			},
// 			GetProductFunc: func(ctx context.Context, key product.Key) (product.Product, error) {
// 				panic("mock out the GetProduct method")
// 			},
// 			ListProductsFunc: func(ctx context.Context, productFilter product.Filter) ([]product.Product, error) {
// 				panic("mock out the ListProducts method")
// 			},
// 			RemoveFromStockFunc: func(ctx context.Context, productID product.Key, movementID types.External) error {
// 				panic("mock out the RemoveFromStock method")
// 			},
// 			RemoveIngredientFunc: func(ctx context.Context, productKey product.Key, id types.External) error {
// 				panic("mock out the RemoveIngredient method")
// 			},
// 			RemoveProductFunc: func(ctx context.Context, key product.Key) error {
// 				panic("mock out the RemoveProduct method")
// 			},
// 			SaveProductFunc: func(ctx context.Context, prd product.Product, flag ...types.WritingFlag) (product.Product, error) {
// 				panic("mock out the SaveProduct method")
// 			},
// 		}
//
// 		// use mockedWorkflow in code that requires Workflow
// 		// and then make assertions.
//
// 	}
type WorkflowMock struct {
	// AddIngredientFunc mocks the AddIngredient method.
	AddIngredientFunc func(ctx context.Context, productKey product.Key, ingredient product.Ingredient) (product.Ingredient, error)

	// AddToStockFunc mocks the AddToStock method.
	AddToStockFunc func(ctx context.Context, productID product.Key, mov stock.Movement) (product.StockAdditionResult, error)

	// ApproveSaleFunc mocks the ApproveSale method.
	ApproveSaleFunc func(ctx context.Context, req product.ApproveSaleRequest) error

	// GetProductFunc mocks the GetProduct method.
	GetProductFunc func(ctx context.Context, key product.Key) (product.Product, error)

	// ListProductsFunc mocks the ListProducts method.
	ListProductsFunc func(ctx context.Context, productFilter product.Filter) ([]product.Product, error)

	// RemoveFromStockFunc mocks the RemoveFromStock method.
	RemoveFromStockFunc func(ctx context.Context, productID product.Key, movementID types.External) error

	// RemoveIngredientFunc mocks the RemoveIngredient method.
	RemoveIngredientFunc func(ctx context.Context, productKey product.Key, id types.External) error

	// RemoveProductFunc mocks the RemoveProduct method.
	RemoveProductFunc func(ctx context.Context, key product.Key) error

	// SaveProductFunc mocks the SaveProduct method.
	SaveProductFunc func(ctx context.Context, prd product.Product, flag ...types.WritingFlag) (product.Product, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIngredient holds details about calls to the AddIngredient method.
		AddIngredient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductKey is the productKey argument value.
			ProductKey product.Key
			// Ingredient is the ingredient argument value.
			Ingredient product.Ingredient
		}
		// AddToStock holds details about calls to the AddToStock method.
		AddToStock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductID is the productID argument value.
			ProductID product.Key
			// Mov is the mov argument value.
			Mov stock.Movement
		}
		// ApproveSale holds details about calls to the ApproveSale method.
		ApproveSale []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req product.ApproveSaleRequest
		}
		// GetProduct holds details about calls to the GetProduct method.
		GetProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key product.Key
		}
		// ListProducts holds details about calls to the ListProducts method.
		ListProducts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductFilter is the productFilter argument value.
			ProductFilter product.Filter
		}
		// RemoveFromStock holds details about calls to the RemoveFromStock method.
		RemoveFromStock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductID is the productID argument value.
			ProductID product.Key
			// MovementID is the movementID argument value.
			MovementID types.External
		}
		// RemoveIngredient holds details about calls to the RemoveIngredient method.
		RemoveIngredient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductKey is the productKey argument value.
			ProductKey product.Key
			// ID is the id argument value.
			ID types.External
		}
		// RemoveProduct holds details about calls to the RemoveProduct method.
		RemoveProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key product.Key
		}
		// SaveProduct holds details about calls to the SaveProduct method.
		SaveProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prd is the prd argument value.
			Prd product.Product
			// Flag is the flag argument value.
			Flag []types.WritingFlag
		}
	}
	lockAddIngredient    sync.RWMutex
	lockAddToStock       sync.RWMutex
	lockApproveSale      sync.RWMutex
	lockGetProduct       sync.RWMutex
	lockListProducts     sync.RWMutex
	lockRemoveFromStock  sync.RWMutex
	lockRemoveIngredient sync.RWMutex
	lockRemoveProduct    sync.RWMutex
	lockSaveProduct      sync.RWMutex
}

// AddIngredient calls AddIngredientFunc.
func (mock *WorkflowMock) AddIngredient(ctx context.Context, productKey product.Key, ingredient product.Ingredient) (product.Ingredient, error) {
	if mock.AddIngredientFunc == nil {
		panic("WorkflowMock.AddIngredientFunc: method is nil but Workflow.AddIngredient was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ProductKey product.Key
		Ingredient product.Ingredient
	}{
		Ctx:        ctx,
		ProductKey: productKey,
		Ingredient: ingredient,
	}
	mock.lockAddIngredient.Lock()
	mock.calls.AddIngredient = append(mock.calls.AddIngredient, callInfo)
	mock.lockAddIngredient.Unlock()
	return mock.AddIngredientFunc(ctx, productKey, ingredient)
}

// AddIngredientCalls gets all the calls that were made to AddIngredient.
// Check the length with:
//     len(mockedWorkflow.AddIngredientCalls())
func (mock *WorkflowMock) AddIngredientCalls() []struct {
	Ctx        context.Context
	ProductKey product.Key
	Ingredient product.Ingredient
} {
	var calls []struct {
		Ctx        context.Context
		ProductKey product.Key
		Ingredient product.Ingredient
	}
	mock.lockAddIngredient.RLock()
	calls = mock.calls.AddIngredient
	mock.lockAddIngredient.RUnlock()
	return calls
}

// AddToStock calls AddToStockFunc.
func (mock *WorkflowMock) AddToStock(ctx context.Context, productID product.Key, mov stock.Movement) (product.StockAdditionResult, error) {
	if mock.AddToStockFunc == nil {
		panic("WorkflowMock.AddToStockFunc: method is nil but Workflow.AddToStock was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProductID product.Key
		Mov       stock.Movement
	}{
		Ctx:       ctx,
		ProductID: productID,
		Mov:       mov,
	}
	mock.lockAddToStock.Lock()
	mock.calls.AddToStock = append(mock.calls.AddToStock, callInfo)
	mock.lockAddToStock.Unlock()
	return mock.AddToStockFunc(ctx, productID, mov)
}

// AddToStockCalls gets all the calls that were made to AddToStock.
// Check the length with:
//     len(mockedWorkflow.AddToStockCalls())
func (mock *WorkflowMock) AddToStockCalls() []struct {
	Ctx       context.Context
	ProductID product.Key
	Mov       stock.Movement
} {
	var calls []struct {
		Ctx       context.Context
		ProductID product.Key
		Mov       stock.Movement
	}
	mock.lockAddToStock.RLock()
	calls = mock.calls.AddToStock
	mock.lockAddToStock.RUnlock()
	return calls
}

// ApproveSale calls ApproveSaleFunc.
func (mock *WorkflowMock) ApproveSale(ctx context.Context, req product.ApproveSaleRequest) error {
	if mock.ApproveSaleFunc == nil {
		panic("WorkflowMock.ApproveSaleFunc: method is nil but Workflow.ApproveSale was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req product.ApproveSaleRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockApproveSale.Lock()
	mock.calls.ApproveSale = append(mock.calls.ApproveSale, callInfo)
	mock.lockApproveSale.Unlock()
	return mock.ApproveSaleFunc(ctx, req)
}

// ApproveSaleCalls gets all the calls that were made to ApproveSale.
// Check the length with:
//     len(mockedWorkflow.ApproveSaleCalls())
func (mock *WorkflowMock) ApproveSaleCalls() []struct {
	Ctx context.Context
	Req product.ApproveSaleRequest
} {
	var calls []struct {
		Ctx context.Context
		Req product.ApproveSaleRequest
	}
	mock.lockApproveSale.RLock()
	calls = mock.calls.ApproveSale
	mock.lockApproveSale.RUnlock()
	return calls
}

// GetProduct calls GetProductFunc.
func (mock *WorkflowMock) GetProduct(ctx context.Context, key product.Key) (product.Product, error) {
	if mock.GetProductFunc == nil {
		panic("WorkflowMock.GetProductFunc: method is nil but Workflow.GetProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key product.Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetProduct.Lock()
	mock.calls.GetProduct = append(mock.calls.GetProduct, callInfo)
	mock.lockGetProduct.Unlock()
	return mock.GetProductFunc(ctx, key)
}

// GetProductCalls gets all the calls that were made to GetProduct.
// Check the length with:
//     len(mockedWorkflow.GetProductCalls())
func (mock *WorkflowMock) GetProductCalls() []struct {
	Ctx context.Context
	Key product.Key
} {
	var calls []struct {
		Ctx context.Context
		Key product.Key
	}
	mock.lockGetProduct.RLock()
	calls = mock.calls.GetProduct
	mock.lockGetProduct.RUnlock()
	return calls
}

// ListProducts calls ListProductsFunc.
func (mock *WorkflowMock) ListProducts(ctx context.Context, productFilter product.Filter) ([]product.Product, error) {
	if mock.ListProductsFunc == nil {
		panic("WorkflowMock.ListProductsFunc: method is nil but Workflow.ListProducts was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ProductFilter product.Filter
	}{
		Ctx:           ctx,
		ProductFilter: productFilter,
	}
	mock.lockListProducts.Lock()
	mock.calls.ListProducts = append(mock.calls.ListProducts, callInfo)
	mock.lockListProducts.Unlock()
	return mock.ListProductsFunc(ctx, productFilter)
}

// ListProductsCalls gets all the calls that were made to ListProducts.
// Check the length with:
//     len(mockedWorkflow.ListProductsCalls())
func (mock *WorkflowMock) ListProductsCalls() []struct {
	Ctx           context.Context
	ProductFilter product.Filter
} {
	var calls []struct {
		Ctx           context.Context
		ProductFilter product.Filter
	}
	mock.lockListProducts.RLock()
	calls = mock.calls.ListProducts
	mock.lockListProducts.RUnlock()
	return calls
}

// RemoveFromStock calls RemoveFromStockFunc.
func (mock *WorkflowMock) RemoveFromStock(ctx context.Context, productID product.Key, movementID types.External) error {
	if mock.RemoveFromStockFunc == nil {
		panic("WorkflowMock.RemoveFromStockFunc: method is nil but Workflow.RemoveFromStock was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ProductID  product.Key
		MovementID types.External
	}{
		Ctx:        ctx,
		ProductID:  productID,
		MovementID: movementID,
	}
	mock.lockRemoveFromStock.Lock()
	mock.calls.RemoveFromStock = append(mock.calls.RemoveFromStock, callInfo)
	mock.lockRemoveFromStock.Unlock()
	return mock.RemoveFromStockFunc(ctx, productID, movementID)
}

// RemoveFromStockCalls gets all the calls that were made to RemoveFromStock.
// Check the length with:
//     len(mockedWorkflow.RemoveFromStockCalls())
func (mock *WorkflowMock) RemoveFromStockCalls() []struct {
	Ctx        context.Context
	ProductID  product.Key
	MovementID types.External
} {
	var calls []struct {
		Ctx        context.Context
		ProductID  product.Key
		MovementID types.External
	}
	mock.lockRemoveFromStock.RLock()
	calls = mock.calls.RemoveFromStock
	mock.lockRemoveFromStock.RUnlock()
	return calls
}

// RemoveIngredient calls RemoveIngredientFunc.
func (mock *WorkflowMock) RemoveIngredient(ctx context.Context, productKey product.Key, id types.External) error {
	if mock.RemoveIngredientFunc == nil {
		panic("WorkflowMock.RemoveIngredientFunc: method is nil but Workflow.RemoveIngredient was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ProductKey product.Key
		ID         types.External
	}{
		Ctx:        ctx,
		ProductKey: productKey,
		ID:         id,
	}
	mock.lockRemoveIngredient.Lock()
	mock.calls.RemoveIngredient = append(mock.calls.RemoveIngredient, callInfo)
	mock.lockRemoveIngredient.Unlock()
	return mock.RemoveIngredientFunc(ctx, productKey, id)
}

// RemoveIngredientCalls gets all the calls that were made to RemoveIngredient.
// Check the length with:
//     len(mockedWorkflow.RemoveIngredientCalls())
func (mock *WorkflowMock) RemoveIngredientCalls() []struct {
	Ctx        context.Context
	ProductKey product.Key
	ID         types.External
} {
	var calls []struct {
		Ctx        context.Context
		ProductKey product.Key
		ID         types.External
	}
	mock.lockRemoveIngredient.RLock()
	calls = mock.calls.RemoveIngredient
	mock.lockRemoveIngredient.RUnlock()
	return calls
}

// RemoveProduct calls RemoveProductFunc.
func (mock *WorkflowMock) RemoveProduct(ctx context.Context, key product.Key) error {
	if mock.RemoveProductFunc == nil {
		panic("WorkflowMock.RemoveProductFunc: method is nil but Workflow.RemoveProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key product.Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockRemoveProduct.Lock()
	mock.calls.RemoveProduct = append(mock.calls.RemoveProduct, callInfo)
	mock.lockRemoveProduct.Unlock()
	return mock.RemoveProductFunc(ctx, key)
}

// RemoveProductCalls gets all the calls that were made to RemoveProduct.
// Check the length with:
//     len(mockedWorkflow.RemoveProductCalls())
func (mock *WorkflowMock) RemoveProductCalls() []struct {
	Ctx context.Context
	Key product.Key
} {
	var calls []struct {
		Ctx context.Context
		Key product.Key
	}
	mock.lockRemoveProduct.RLock()
	calls = mock.calls.RemoveProduct
	mock.lockRemoveProduct.RUnlock()
	return calls
}

// SaveProduct calls SaveProductFunc.
func (mock *WorkflowMock) SaveProduct(ctx context.Context, prd product.Product, flag ...types.WritingFlag) (product.Product, error) {
	if mock.SaveProductFunc == nil {
		panic("WorkflowMock.SaveProductFunc: method is nil but Workflow.SaveProduct was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Prd  product.Product
		Flag []types.WritingFlag
	}{
		Ctx:  ctx,
		Prd:  prd,
		Flag: flag,
	}
	mock.lockSaveProduct.Lock()
	mock.calls.SaveProduct = append(mock.calls.SaveProduct, callInfo)
	mock.lockSaveProduct.Unlock()
	return mock.SaveProductFunc(ctx, prd, flag...)
}

// SaveProductCalls gets all the calls that were made to SaveProduct.
// Check the length with:
//     len(mockedWorkflow.SaveProductCalls())
func (mock *WorkflowMock) SaveProductCalls() []struct {
	Ctx  context.Context
	Prd  product.Product
	Flag []types.WritingFlag
} {
	var calls []struct {
		Ctx  context.Context
		Prd  product.Product
		Flag []types.WritingFlag
	}
	mock.lockSaveProduct.RLock()
	calls = mock.calls.SaveProduct
	mock.lockSaveProduct.RUnlock()
	return calls
}

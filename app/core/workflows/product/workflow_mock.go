// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package product

import (
	"context"
	"gomies/app/core/entities/ingredient"
	product2 "gomies/app/core/entities/product"
	"gomies/app/sdk/types"
	"sync"
)

// Ensure, that WorkflowMock does implement Workflow.
// If this is not the case, regenerate this file with moq.
var _ Workflow = &WorkflowMock{}

// WorkflowMock is a mock implementation of Workflow.
//
// 	func TestSomethingThatUsesWorkflow(t *testing.T) {
//
// 		// make and configure a mocked Workflow
// 		mockedWorkflow := &WorkflowMock{
// 			AddProductIngredientFunc: func(ctx context.Context, ingredientMoqParam ingredient.Ingredient) (ingredient.Ingredient, error) {
// 				panic("mock out the AddProductIngredient method")
// 			},
// 			CreateProductFunc: func(ctx context.Context, prd product2.Product) (product2.Product, error) {
// 				panic("mock out the CreateProduct method")
// 			},
// 			GetProductFunc: func(ctx context.Context, key product2.Key) (product2.Product, error) {
// 				panic("mock out the GetProduct method")
// 			},
// 			ListProductIngredientsFunc: func(ctx context.Context, productID types.ID) ([]ingredient.Ingredient, error) {
// 				panic("mock out the ListProductIngredients method")
// 			},
// 			ListProductsFunc: func(ctx context.Context, productFilter product2.Filter) ([]product2.Product, int, error) {
// 				panic("mock out the ListProducts method")
// 			},
// 			RemoveProductFunc: func(ctx context.Context, key product2.Key) error {
// 				panic("mock out the RemoveProduct method")
// 			},
// 			RemoveProductIngredientFunc: func(ctx context.Context, id types.ID) error {
// 				panic("mock out the RemoveProductIngredient method")
// 			},
// 			ReserveProductFunc: func(ctx context.Context, reservation Reservation) (Reservation, error) {
// 				panic("mock out the ReserveProduct method")
// 			},
// 			UpdateProductFunc: func(ctx context.Context, prd product2.Product) error {
// 				panic("mock out the UpdateProduct method")
// 			},
// 			UpdateReservationFunc: func(ctx context.Context, reservationID types.ID, consume bool) error {
// 				panic("mock out the UpdateReservation method")
// 			},
// 		}
//
// 		// use mockedWorkflow in code that requires Workflow
// 		// and then make assertions.
//
// 	}
type WorkflowMock struct {
	// AddProductIngredientFunc mocks the AddProductIngredient method.
	AddProductIngredientFunc func(ctx context.Context, ingredientMoqParam ingredient.Ingredient) (ingredient.Ingredient, error)

	// CreateProductFunc mocks the CreateProduct method.
	CreateProductFunc func(ctx context.Context, prd product2.Product) (product2.Product, error)

	// GetProductFunc mocks the GetProduct method.
	GetProductFunc func(ctx context.Context, key product2.Key) (product2.Product, error)

	// ListProductIngredientsFunc mocks the ListProductIngredients method.
	ListProductIngredientsFunc func(ctx context.Context, productID types.ID) ([]ingredient.Ingredient, error)

	// ListProductsFunc mocks the ListProducts method.
	ListProductsFunc func(ctx context.Context, productFilter product2.Filter) ([]product2.Product, int, error)

	// RemoveProductFunc mocks the RemoveProduct method.
	RemoveProductFunc func(ctx context.Context, key product2.Key) error

	// RemoveProductIngredientFunc mocks the RemoveProductIngredient method.
	RemoveProductIngredientFunc func(ctx context.Context, id types.ID) error

	// ReserveProductFunc mocks the ReserveProduct method.
	ReserveProductFunc func(ctx context.Context, reservation Reservation) (Reservation, error)

	// UpdateProductFunc mocks the UpdateProduct method.
	UpdateProductFunc func(ctx context.Context, prd product2.Product) error

	// UpdateReservationFunc mocks the UpdateReservation method.
	UpdateReservationFunc func(ctx context.Context, reservationID types.ID, consume bool) error

	// calls tracks calls to the methods.
	calls struct {
		// AddProductIngredient holds details about calls to the AddProductIngredient method.
		AddProductIngredient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IngredientMoqParam is the ingredientMoqParam argument value.
			IngredientMoqParam ingredient.Ingredient
		}
		// CreateProduct holds details about calls to the CreateProduct method.
		CreateProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prd is the prd argument value.
			Prd product2.Product
		}
		// GetProduct holds details about calls to the GetProduct method.
		GetProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key product2.Key
		}
		// ListProductIngredients holds details about calls to the ListProductIngredients method.
		ListProductIngredients []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductID is the productID argument value.
			ProductID types.ID
		}
		// ListProducts holds details about calls to the ListProducts method.
		ListProducts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductFilter is the productFilter argument value.
			ProductFilter product2.Filter
		}
		// RemoveProduct holds details about calls to the RemoveProduct method.
		RemoveProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key product2.Key
		}
		// RemoveProductIngredient holds details about calls to the RemoveProductIngredient method.
		RemoveProductIngredient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.ID
		}
		// ReserveProduct holds details about calls to the ReserveProduct method.
		ReserveProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Reservation is the reservation argument value.
			Reservation Reservation
		}
		// UpdateProduct holds details about calls to the UpdateProduct method.
		UpdateProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prd is the prd argument value.
			Prd product2.Product
		}
		// UpdateReservation holds details about calls to the UpdateReservation method.
		UpdateReservation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReservationID is the reservationID argument value.
			ReservationID types.ID
			// Consume is the consume argument value.
			Consume bool
		}
	}
	lockAddProductIngredient    sync.RWMutex
	lockCreateProduct           sync.RWMutex
	lockGetProduct              sync.RWMutex
	lockListProductIngredients  sync.RWMutex
	lockListProducts            sync.RWMutex
	lockRemoveProduct           sync.RWMutex
	lockRemoveProductIngredient sync.RWMutex
	lockReserveProduct          sync.RWMutex
	lockUpdateProduct           sync.RWMutex
	lockUpdateReservation       sync.RWMutex
}

// AddProductIngredient calls AddProductIngredientFunc.
func (mock *WorkflowMock) AddProductIngredient(ctx context.Context, ingredientMoqParam ingredient.Ingredient) (ingredient.Ingredient, error) {
	if mock.AddProductIngredientFunc == nil {
		panic("WorkflowMock.AddProductIngredientFunc: method is nil but Workflow.AddProductIngredient was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		IngredientMoqParam ingredient.Ingredient
	}{
		Ctx:                ctx,
		IngredientMoqParam: ingredientMoqParam,
	}
	mock.lockAddProductIngredient.Lock()
	mock.calls.AddProductIngredient = append(mock.calls.AddProductIngredient, callInfo)
	mock.lockAddProductIngredient.Unlock()
	return mock.AddProductIngredientFunc(ctx, ingredientMoqParam)
}

// AddProductIngredientCalls gets all the calls that were made to AddProductIngredient.
// Check the length with:
//     len(mockedWorkflow.AddProductIngredientCalls())
func (mock *WorkflowMock) AddProductIngredientCalls() []struct {
	Ctx                context.Context
	IngredientMoqParam ingredient.Ingredient
} {
	var calls []struct {
		Ctx                context.Context
		IngredientMoqParam ingredient.Ingredient
	}
	mock.lockAddProductIngredient.RLock()
	calls = mock.calls.AddProductIngredient
	mock.lockAddProductIngredient.RUnlock()
	return calls
}

// CreateProduct calls CreateProductFunc.
func (mock *WorkflowMock) CreateProduct(ctx context.Context, prd product2.Product) (product2.Product, error) {
	if mock.CreateProductFunc == nil {
		panic("WorkflowMock.CreateProductFunc: method is nil but Workflow.CreateProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Prd product2.Product
	}{
		Ctx: ctx,
		Prd: prd,
	}
	mock.lockCreateProduct.Lock()
	mock.calls.CreateProduct = append(mock.calls.CreateProduct, callInfo)
	mock.lockCreateProduct.Unlock()
	return mock.CreateProductFunc(ctx, prd)
}

// CreateProductCalls gets all the calls that were made to CreateProduct.
// Check the length with:
//     len(mockedWorkflow.CreateProductCalls())
func (mock *WorkflowMock) CreateProductCalls() []struct {
	Ctx context.Context
	Prd product2.Product
} {
	var calls []struct {
		Ctx context.Context
		Prd product2.Product
	}
	mock.lockCreateProduct.RLock()
	calls = mock.calls.CreateProduct
	mock.lockCreateProduct.RUnlock()
	return calls
}

// GetProduct calls GetProductFunc.
func (mock *WorkflowMock) GetProduct(ctx context.Context, key product2.Key) (product2.Product, error) {
	if mock.GetProductFunc == nil {
		panic("WorkflowMock.GetProductFunc: method is nil but Workflow.GetProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key product2.Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetProduct.Lock()
	mock.calls.GetProduct = append(mock.calls.GetProduct, callInfo)
	mock.lockGetProduct.Unlock()
	return mock.GetProductFunc(ctx, key)
}

// GetProductCalls gets all the calls that were made to GetProduct.
// Check the length with:
//     len(mockedWorkflow.GetProductCalls())
func (mock *WorkflowMock) GetProductCalls() []struct {
	Ctx context.Context
	Key product2.Key
} {
	var calls []struct {
		Ctx context.Context
		Key product2.Key
	}
	mock.lockGetProduct.RLock()
	calls = mock.calls.GetProduct
	mock.lockGetProduct.RUnlock()
	return calls
}

// ListProductIngredients calls ListProductIngredientsFunc.
func (mock *WorkflowMock) ListProductIngredients(ctx context.Context, productID types.ID) ([]ingredient.Ingredient, error) {
	if mock.ListProductIngredientsFunc == nil {
		panic("WorkflowMock.ListProductIngredientsFunc: method is nil but Workflow.ListProductIngredients was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProductID types.ID
	}{
		Ctx:       ctx,
		ProductID: productID,
	}
	mock.lockListProductIngredients.Lock()
	mock.calls.ListProductIngredients = append(mock.calls.ListProductIngredients, callInfo)
	mock.lockListProductIngredients.Unlock()
	return mock.ListProductIngredientsFunc(ctx, productID)
}

// ListProductIngredientsCalls gets all the calls that were made to ListProductIngredients.
// Check the length with:
//     len(mockedWorkflow.ListProductIngredientsCalls())
func (mock *WorkflowMock) ListProductIngredientsCalls() []struct {
	Ctx       context.Context
	ProductID types.ID
} {
	var calls []struct {
		Ctx       context.Context
		ProductID types.ID
	}
	mock.lockListProductIngredients.RLock()
	calls = mock.calls.ListProductIngredients
	mock.lockListProductIngredients.RUnlock()
	return calls
}

// ListProducts calls ListProductsFunc.
func (mock *WorkflowMock) ListProducts(ctx context.Context, productFilter product2.Filter) ([]product2.Product, int, error) {
	if mock.ListProductsFunc == nil {
		panic("WorkflowMock.ListProductsFunc: method is nil but Workflow.ListProducts was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ProductFilter product2.Filter
	}{
		Ctx:           ctx,
		ProductFilter: productFilter,
	}
	mock.lockListProducts.Lock()
	mock.calls.ListProducts = append(mock.calls.ListProducts, callInfo)
	mock.lockListProducts.Unlock()
	return mock.ListProductsFunc(ctx, productFilter)
}

// ListProductsCalls gets all the calls that were made to ListProducts.
// Check the length with:
//     len(mockedWorkflow.ListProductsCalls())
func (mock *WorkflowMock) ListProductsCalls() []struct {
	Ctx           context.Context
	ProductFilter product2.Filter
} {
	var calls []struct {
		Ctx           context.Context
		ProductFilter product2.Filter
	}
	mock.lockListProducts.RLock()
	calls = mock.calls.ListProducts
	mock.lockListProducts.RUnlock()
	return calls
}

// RemoveProduct calls RemoveProductFunc.
func (mock *WorkflowMock) RemoveProduct(ctx context.Context, key product2.Key) error {
	if mock.RemoveProductFunc == nil {
		panic("WorkflowMock.RemoveProductFunc: method is nil but Workflow.RemoveProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key product2.Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockRemoveProduct.Lock()
	mock.calls.RemoveProduct = append(mock.calls.RemoveProduct, callInfo)
	mock.lockRemoveProduct.Unlock()
	return mock.RemoveProductFunc(ctx, key)
}

// RemoveProductCalls gets all the calls that were made to RemoveProduct.
// Check the length with:
//     len(mockedWorkflow.RemoveProductCalls())
func (mock *WorkflowMock) RemoveProductCalls() []struct {
	Ctx context.Context
	Key product2.Key
} {
	var calls []struct {
		Ctx context.Context
		Key product2.Key
	}
	mock.lockRemoveProduct.RLock()
	calls = mock.calls.RemoveProduct
	mock.lockRemoveProduct.RUnlock()
	return calls
}

// RemoveProductIngredient calls RemoveProductIngredientFunc.
func (mock *WorkflowMock) RemoveProductIngredient(ctx context.Context, id types.ID) error {
	if mock.RemoveProductIngredientFunc == nil {
		panic("WorkflowMock.RemoveProductIngredientFunc: method is nil but Workflow.RemoveProductIngredient was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.ID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemoveProductIngredient.Lock()
	mock.calls.RemoveProductIngredient = append(mock.calls.RemoveProductIngredient, callInfo)
	mock.lockRemoveProductIngredient.Unlock()
	return mock.RemoveProductIngredientFunc(ctx, id)
}

// RemoveProductIngredientCalls gets all the calls that were made to RemoveProductIngredient.
// Check the length with:
//     len(mockedWorkflow.RemoveProductIngredientCalls())
func (mock *WorkflowMock) RemoveProductIngredientCalls() []struct {
	Ctx context.Context
	ID  types.ID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.ID
	}
	mock.lockRemoveProductIngredient.RLock()
	calls = mock.calls.RemoveProductIngredient
	mock.lockRemoveProductIngredient.RUnlock()
	return calls
}

// ReserveProduct calls ReserveProductFunc.
func (mock *WorkflowMock) ReserveProduct(ctx context.Context, reservation Reservation) (Reservation, error) {
	if mock.ReserveProductFunc == nil {
		panic("WorkflowMock.ReserveProductFunc: method is nil but Workflow.ReserveProduct was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Reservation Reservation
	}{
		Ctx:         ctx,
		Reservation: reservation,
	}
	mock.lockReserveProduct.Lock()
	mock.calls.ReserveProduct = append(mock.calls.ReserveProduct, callInfo)
	mock.lockReserveProduct.Unlock()
	return mock.ReserveProductFunc(ctx, reservation)
}

// ReserveProductCalls gets all the calls that were made to ReserveProduct.
// Check the length with:
//     len(mockedWorkflow.ReserveProductCalls())
func (mock *WorkflowMock) ReserveProductCalls() []struct {
	Ctx         context.Context
	Reservation Reservation
} {
	var calls []struct {
		Ctx         context.Context
		Reservation Reservation
	}
	mock.lockReserveProduct.RLock()
	calls = mock.calls.ReserveProduct
	mock.lockReserveProduct.RUnlock()
	return calls
}

// UpdateProduct calls UpdateProductFunc.
func (mock *WorkflowMock) UpdateProduct(ctx context.Context, prd product2.Product) error {
	if mock.UpdateProductFunc == nil {
		panic("WorkflowMock.UpdateProductFunc: method is nil but Workflow.UpdateProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Prd product2.Product
	}{
		Ctx: ctx,
		Prd: prd,
	}
	mock.lockUpdateProduct.Lock()
	mock.calls.UpdateProduct = append(mock.calls.UpdateProduct, callInfo)
	mock.lockUpdateProduct.Unlock()
	return mock.UpdateProductFunc(ctx, prd)
}

// UpdateProductCalls gets all the calls that were made to UpdateProduct.
// Check the length with:
//     len(mockedWorkflow.UpdateProductCalls())
func (mock *WorkflowMock) UpdateProductCalls() []struct {
	Ctx context.Context
	Prd product2.Product
} {
	var calls []struct {
		Ctx context.Context
		Prd product2.Product
	}
	mock.lockUpdateProduct.RLock()
	calls = mock.calls.UpdateProduct
	mock.lockUpdateProduct.RUnlock()
	return calls
}

// UpdateReservation calls UpdateReservationFunc.
func (mock *WorkflowMock) UpdateReservation(ctx context.Context, reservationID types.ID, consume bool) error {
	if mock.UpdateReservationFunc == nil {
		panic("WorkflowMock.UpdateReservationFunc: method is nil but Workflow.UpdateReservation was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ReservationID types.ID
		Consume       bool
	}{
		Ctx:           ctx,
		ReservationID: reservationID,
		Consume:       consume,
	}
	mock.lockUpdateReservation.Lock()
	mock.calls.UpdateReservation = append(mock.calls.UpdateReservation, callInfo)
	mock.lockUpdateReservation.Unlock()
	return mock.UpdateReservationFunc(ctx, reservationID, consume)
}

// UpdateReservationCalls gets all the calls that were made to UpdateReservation.
// Check the length with:
//     len(mockedWorkflow.UpdateReservationCalls())
func (mock *WorkflowMock) UpdateReservationCalls() []struct {
	Ctx           context.Context
	ReservationID types.ID
	Consume       bool
} {
	var calls []struct {
		Ctx           context.Context
		ReservationID types.ID
		Consume       bool
	}
	mock.lockUpdateReservation.RLock()
	calls = mock.calls.UpdateReservation
	mock.lockUpdateReservation.RUnlock()
	return calls
}

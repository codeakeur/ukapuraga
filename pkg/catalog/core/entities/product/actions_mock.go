// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package product

import (
	"context"
	"gomies/pkg/sdk/types"
	"sync"
)

// Ensure, that ActionsMock does implement Actions.
// If this is not the case, regenerate this file with moq.
var _ Actions = &ActionsMock{}

// ActionsMock is a mock implementation of Actions.
//
// 	func TestSomethingThatUsesActions(t *testing.T) {
//
// 		// make and configure a mocked Actions
// 		mockedActions := &ActionsMock{
// 			GetFunc: func(ctx context.Context, key Key) (Product, error) {
// 				panic("mock out the Get method")
// 			},
// 			GetProductSaleInfoFunc: func(ctx context.Context, key Key) (Sale, error) {
// 				panic("mock out the GetProductSaleInfo method")
// 			},
// 			GetProductStockInfoFunc: func(ctx context.Context, key Key) (Stock, error) {
// 				panic("mock out the GetProductStockInfo method")
// 			},
// 			ListFunc: func(ctx context.Context, productFilter Filter) ([]Product, error) {
// 				panic("mock out the List method")
// 			},
// 			ListIngredientsFunc: func(ctx context.Context, productKey Key) ([]Ingredient, error) {
// 				panic("mock out the ListIngredients method")
// 			},
// 			RemoveFunc: func(ctx context.Context, key Key) error {
// 				panic("mock out the Remove method")
// 			},
// 			RemoveAllIngredientsFunc: func(ctx context.Context, productKey Key) error {
// 				panic("mock out the RemoveAllIngredients method")
// 			},
// 			RemoveIngredientFunc: func(ctx context.Context, productKey Key, ingredientID types.External) error {
// 				panic("mock out the RemoveIngredient method")
// 			},
// 			SaveFunc: func(ctx context.Context, prd Product, flag ...types.WritingFlag) (Product, error) {
// 				panic("mock out the Save method")
// 			},
// 			SaveIngredientsFunc: func(ctx context.Context, productKey Key, ingredients ...Ingredient) ([]Ingredient, error) {
// 				panic("mock out the SaveIngredients method")
// 			},
// 		}
//
// 		// use mockedActions in code that requires Actions
// 		// and then make assertions.
//
// 	}
type ActionsMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, key Key) (Product, error)

	// GetProductSaleInfoFunc mocks the GetProductSaleInfo method.
	GetProductSaleInfoFunc func(ctx context.Context, key Key) (Sale, error)

	// GetProductStockInfoFunc mocks the GetProductStockInfo method.
	GetProductStockInfoFunc func(ctx context.Context, key Key) (Stock, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, productFilter Filter) ([]Product, error)

	// ListIngredientsFunc mocks the ListIngredients method.
	ListIngredientsFunc func(ctx context.Context, productKey Key) ([]Ingredient, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, key Key) error

	// RemoveAllIngredientsFunc mocks the RemoveAllIngredients method.
	RemoveAllIngredientsFunc func(ctx context.Context, productKey Key) error

	// RemoveIngredientFunc mocks the RemoveIngredient method.
	RemoveIngredientFunc func(ctx context.Context, productKey Key, ingredientID types.External) error

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, prd Product, flag ...types.WritingFlag) (Product, error)

	// SaveIngredientsFunc mocks the SaveIngredients method.
	SaveIngredientsFunc func(ctx context.Context, productKey Key, ingredients ...Ingredient) ([]Ingredient, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// GetProductSaleInfo holds details about calls to the GetProductSaleInfo method.
		GetProductSaleInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// GetProductStockInfo holds details about calls to the GetProductStockInfo method.
		GetProductStockInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductFilter is the productFilter argument value.
			ProductFilter Filter
		}
		// ListIngredients holds details about calls to the ListIngredients method.
		ListIngredients []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductKey is the productKey argument value.
			ProductKey Key
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// RemoveAllIngredients holds details about calls to the RemoveAllIngredients method.
		RemoveAllIngredients []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductKey is the productKey argument value.
			ProductKey Key
		}
		// RemoveIngredient holds details about calls to the RemoveIngredient method.
		RemoveIngredient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductKey is the productKey argument value.
			ProductKey Key
			// IngredientID is the ingredientID argument value.
			IngredientID types.External
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prd is the prd argument value.
			Prd Product
			// Flag is the flag argument value.
			Flag []types.WritingFlag
		}
		// SaveIngredients holds details about calls to the SaveIngredients method.
		SaveIngredients []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductKey is the productKey argument value.
			ProductKey Key
			// Ingredients is the ingredients argument value.
			Ingredients []Ingredient
		}
	}
	lockGet                  sync.RWMutex
	lockGetProductSaleInfo   sync.RWMutex
	lockGetProductStockInfo  sync.RWMutex
	lockList                 sync.RWMutex
	lockListIngredients      sync.RWMutex
	lockRemove               sync.RWMutex
	lockRemoveAllIngredients sync.RWMutex
	lockRemoveIngredient     sync.RWMutex
	lockSave                 sync.RWMutex
	lockSaveIngredients      sync.RWMutex
}

// Get calls GetFunc.
func (mock *ActionsMock) Get(ctx context.Context, key Key) (Product, error) {
	if mock.GetFunc == nil {
		panic("ActionsMock.GetFunc: method is nil but Actions.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedActions.GetCalls())
func (mock *ActionsMock) GetCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetProductSaleInfo calls GetProductSaleInfoFunc.
func (mock *ActionsMock) GetProductSaleInfo(ctx context.Context, key Key) (Sale, error) {
	if mock.GetProductSaleInfoFunc == nil {
		panic("ActionsMock.GetProductSaleInfoFunc: method is nil but Actions.GetProductSaleInfo was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetProductSaleInfo.Lock()
	mock.calls.GetProductSaleInfo = append(mock.calls.GetProductSaleInfo, callInfo)
	mock.lockGetProductSaleInfo.Unlock()
	return mock.GetProductSaleInfoFunc(ctx, key)
}

// GetProductSaleInfoCalls gets all the calls that were made to GetProductSaleInfo.
// Check the length with:
//     len(mockedActions.GetProductSaleInfoCalls())
func (mock *ActionsMock) GetProductSaleInfoCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockGetProductSaleInfo.RLock()
	calls = mock.calls.GetProductSaleInfo
	mock.lockGetProductSaleInfo.RUnlock()
	return calls
}

// GetProductStockInfo calls GetProductStockInfoFunc.
func (mock *ActionsMock) GetProductStockInfo(ctx context.Context, key Key) (Stock, error) {
	if mock.GetProductStockInfoFunc == nil {
		panic("ActionsMock.GetProductStockInfoFunc: method is nil but Actions.GetProductStockInfo was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetProductStockInfo.Lock()
	mock.calls.GetProductStockInfo = append(mock.calls.GetProductStockInfo, callInfo)
	mock.lockGetProductStockInfo.Unlock()
	return mock.GetProductStockInfoFunc(ctx, key)
}

// GetProductStockInfoCalls gets all the calls that were made to GetProductStockInfo.
// Check the length with:
//     len(mockedActions.GetProductStockInfoCalls())
func (mock *ActionsMock) GetProductStockInfoCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockGetProductStockInfo.RLock()
	calls = mock.calls.GetProductStockInfo
	mock.lockGetProductStockInfo.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ActionsMock) List(ctx context.Context, productFilter Filter) ([]Product, error) {
	if mock.ListFunc == nil {
		panic("ActionsMock.ListFunc: method is nil but Actions.List was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ProductFilter Filter
	}{
		Ctx:           ctx,
		ProductFilter: productFilter,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, productFilter)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedActions.ListCalls())
func (mock *ActionsMock) ListCalls() []struct {
	Ctx           context.Context
	ProductFilter Filter
} {
	var calls []struct {
		Ctx           context.Context
		ProductFilter Filter
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListIngredients calls ListIngredientsFunc.
func (mock *ActionsMock) ListIngredients(ctx context.Context, productKey Key) ([]Ingredient, error) {
	if mock.ListIngredientsFunc == nil {
		panic("ActionsMock.ListIngredientsFunc: method is nil but Actions.ListIngredients was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ProductKey Key
	}{
		Ctx:        ctx,
		ProductKey: productKey,
	}
	mock.lockListIngredients.Lock()
	mock.calls.ListIngredients = append(mock.calls.ListIngredients, callInfo)
	mock.lockListIngredients.Unlock()
	return mock.ListIngredientsFunc(ctx, productKey)
}

// ListIngredientsCalls gets all the calls that were made to ListIngredients.
// Check the length with:
//     len(mockedActions.ListIngredientsCalls())
func (mock *ActionsMock) ListIngredientsCalls() []struct {
	Ctx        context.Context
	ProductKey Key
} {
	var calls []struct {
		Ctx        context.Context
		ProductKey Key
	}
	mock.lockListIngredients.RLock()
	calls = mock.calls.ListIngredients
	mock.lockListIngredients.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *ActionsMock) Remove(ctx context.Context, key Key) error {
	if mock.RemoveFunc == nil {
		panic("ActionsMock.RemoveFunc: method is nil but Actions.Remove was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, key)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedActions.RemoveCalls())
func (mock *ActionsMock) RemoveCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// RemoveAllIngredients calls RemoveAllIngredientsFunc.
func (mock *ActionsMock) RemoveAllIngredients(ctx context.Context, productKey Key) error {
	if mock.RemoveAllIngredientsFunc == nil {
		panic("ActionsMock.RemoveAllIngredientsFunc: method is nil but Actions.RemoveAllIngredients was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ProductKey Key
	}{
		Ctx:        ctx,
		ProductKey: productKey,
	}
	mock.lockRemoveAllIngredients.Lock()
	mock.calls.RemoveAllIngredients = append(mock.calls.RemoveAllIngredients, callInfo)
	mock.lockRemoveAllIngredients.Unlock()
	return mock.RemoveAllIngredientsFunc(ctx, productKey)
}

// RemoveAllIngredientsCalls gets all the calls that were made to RemoveAllIngredients.
// Check the length with:
//     len(mockedActions.RemoveAllIngredientsCalls())
func (mock *ActionsMock) RemoveAllIngredientsCalls() []struct {
	Ctx        context.Context
	ProductKey Key
} {
	var calls []struct {
		Ctx        context.Context
		ProductKey Key
	}
	mock.lockRemoveAllIngredients.RLock()
	calls = mock.calls.RemoveAllIngredients
	mock.lockRemoveAllIngredients.RUnlock()
	return calls
}

// RemoveIngredient calls RemoveIngredientFunc.
func (mock *ActionsMock) RemoveIngredient(ctx context.Context, productKey Key, ingredientID types.External) error {
	if mock.RemoveIngredientFunc == nil {
		panic("ActionsMock.RemoveIngredientFunc: method is nil but Actions.RemoveIngredient was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ProductKey   Key
		IngredientID types.External
	}{
		Ctx:          ctx,
		ProductKey:   productKey,
		IngredientID: ingredientID,
	}
	mock.lockRemoveIngredient.Lock()
	mock.calls.RemoveIngredient = append(mock.calls.RemoveIngredient, callInfo)
	mock.lockRemoveIngredient.Unlock()
	return mock.RemoveIngredientFunc(ctx, productKey, ingredientID)
}

// RemoveIngredientCalls gets all the calls that were made to RemoveIngredient.
// Check the length with:
//     len(mockedActions.RemoveIngredientCalls())
func (mock *ActionsMock) RemoveIngredientCalls() []struct {
	Ctx          context.Context
	ProductKey   Key
	IngredientID types.External
} {
	var calls []struct {
		Ctx          context.Context
		ProductKey   Key
		IngredientID types.External
	}
	mock.lockRemoveIngredient.RLock()
	calls = mock.calls.RemoveIngredient
	mock.lockRemoveIngredient.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ActionsMock) Save(ctx context.Context, prd Product, flag ...types.WritingFlag) (Product, error) {
	if mock.SaveFunc == nil {
		panic("ActionsMock.SaveFunc: method is nil but Actions.Save was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Prd  Product
		Flag []types.WritingFlag
	}{
		Ctx:  ctx,
		Prd:  prd,
		Flag: flag,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, prd, flag...)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedActions.SaveCalls())
func (mock *ActionsMock) SaveCalls() []struct {
	Ctx  context.Context
	Prd  Product
	Flag []types.WritingFlag
} {
	var calls []struct {
		Ctx  context.Context
		Prd  Product
		Flag []types.WritingFlag
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// SaveIngredients calls SaveIngredientsFunc.
func (mock *ActionsMock) SaveIngredients(ctx context.Context, productKey Key, ingredients ...Ingredient) ([]Ingredient, error) {
	if mock.SaveIngredientsFunc == nil {
		panic("ActionsMock.SaveIngredientsFunc: method is nil but Actions.SaveIngredients was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ProductKey  Key
		Ingredients []Ingredient
	}{
		Ctx:         ctx,
		ProductKey:  productKey,
		Ingredients: ingredients,
	}
	mock.lockSaveIngredients.Lock()
	mock.calls.SaveIngredients = append(mock.calls.SaveIngredients, callInfo)
	mock.lockSaveIngredients.Unlock()
	return mock.SaveIngredientsFunc(ctx, productKey, ingredients...)
}

// SaveIngredientsCalls gets all the calls that were made to SaveIngredients.
// Check the length with:
//     len(mockedActions.SaveIngredientsCalls())
func (mock *ActionsMock) SaveIngredientsCalls() []struct {
	Ctx         context.Context
	ProductKey  Key
	Ingredients []Ingredient
} {
	var calls []struct {
		Ctx         context.Context
		ProductKey  Key
		Ingredients []Ingredient
	}
	mock.lockSaveIngredients.RLock()
	calls = mock.calls.SaveIngredients
	mock.lockSaveIngredients.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package store

import (
	"context"
	"gomies/app/core/types/id"
	"sync"
)

// Ensure, that ActionsMock does implement Actions.
// If this is not the case, regenerate this file with moq.
var _ Actions = &ActionsMock{}

// ActionsMock is a mock implementation of Actions.
//
// 	func TestSomethingThatUsesActions(t *testing.T) {
//
// 		// make and configure a mocked Actions
// 		mockedActions := &ActionsMock{
// 			CreateFunc: func(contextMoqParam context.Context, store Store) (Store, error) {
// 				panic("mock out the Create method")
// 			},
// 			GetFunc: func(contextMoqParam context.Context, external id.External) (Store, error) {
// 				panic("mock out the Get method")
// 			},
// 			GetWithNickFunc: func(contextMoqParam context.Context, s string) (Store, error) {
// 				panic("mock out the GetWithOperatorAndStoreNick method")
// 			},
// 			ListFunc: func(contextMoqParam context.Context, filter Filter) ([]Store, error) {
// 				panic("mock out the List method")
// 			},
// 			RemoveFunc: func(contextMoqParam context.Context, external id.External) error {
// 				panic("mock out the Remove method")
// 			},
// 			UpdateFunc: func(contextMoqParam context.Context, store Store) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedActions in code that requires Actions
// 		// and then make assertions.
//
// 	}
type ActionsMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(contextMoqParam context.Context, store Store) (Store, error)

	// GetFunc mocks the Get method.
	GetFunc func(contextMoqParam context.Context, external id.External) (Store, error)

	// GetWithNickFunc mocks the GetWithOperatorAndStoreNick method.
	GetWithNickFunc func(contextMoqParam context.Context, s string) (Store, error)

	// ListFunc mocks the List method.
	ListFunc func(contextMoqParam context.Context, filter Filter) ([]Store, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(contextMoqParam context.Context, external id.External) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(contextMoqParam context.Context, store Store) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Store is the store argument value.
			Store Store
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// GetWithOperatorAndStoreNick holds details about calls to the GetWithOperatorAndStoreNick method.
		GetWithNick []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// List holds details about calls to the List method.
		List []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Filter is the filter argument value.
			Filter Filter
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// External is the external argument value.
			External id.External
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Store is the store argument value.
			Store Store
		}
	}
	lockCreate      sync.RWMutex
	lockGet         sync.RWMutex
	lockGetWithNick sync.RWMutex
	lockList        sync.RWMutex
	lockRemove      sync.RWMutex
	lockUpdate      sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ActionsMock) Create(contextMoqParam context.Context, store Store) (Store, error) {
	if mock.CreateFunc == nil {
		panic("ActionsMock.CreateFunc: method is nil but Actions.Create was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Store           Store
	}{
		ContextMoqParam: contextMoqParam,
		Store:           store,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(contextMoqParam, store)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedActions.CreateCalls())
func (mock *ActionsMock) CreateCalls() []struct {
	ContextMoqParam context.Context
	Store           Store
} {
	var calls []struct {
		ContextMoqParam context.Context
		Store           Store
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ActionsMock) Get(contextMoqParam context.Context, external id.External) (Store, error) {
	if mock.GetFunc == nil {
		panic("ActionsMock.GetFunc: method is nil but Actions.Get was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(contextMoqParam, external)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedActions.GetCalls())
func (mock *ActionsMock) GetCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetWithOperatorAndStoreNick calls GetWithNickFunc.
func (mock *ActionsMock) GetWithNick(contextMoqParam context.Context, s string) (Store, error) {
	if mock.GetWithNickFunc == nil {
		panic("ActionsMock.GetWithNickFunc: method is nil but Actions.GetWithOperatorAndStoreNick was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockGetWithNick.Lock()
	mock.calls.GetWithNick = append(mock.calls.GetWithNick, callInfo)
	mock.lockGetWithNick.Unlock()
	return mock.GetWithNickFunc(contextMoqParam, s)
}

// GetWithNickCalls gets all the calls that were made to GetWithOperatorAndStoreNick.
// Check the length with:
//     len(mockedActions.GetWithNickCalls())
func (mock *ActionsMock) GetWithNickCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockGetWithNick.RLock()
	calls = mock.calls.GetWithNick
	mock.lockGetWithNick.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ActionsMock) List(contextMoqParam context.Context, filter Filter) ([]Store, error) {
	if mock.ListFunc == nil {
		panic("ActionsMock.ListFunc: method is nil but Actions.List was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Filter          Filter
	}{
		ContextMoqParam: contextMoqParam,
		Filter:          filter,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(contextMoqParam, filter)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedActions.ListCalls())
func (mock *ActionsMock) ListCalls() []struct {
	ContextMoqParam context.Context
	Filter          Filter
} {
	var calls []struct {
		ContextMoqParam context.Context
		Filter          Filter
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *ActionsMock) Remove(contextMoqParam context.Context, external id.External) error {
	if mock.RemoveFunc == nil {
		panic("ActionsMock.RemoveFunc: method is nil but Actions.Remove was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		External        id.External
	}{
		ContextMoqParam: contextMoqParam,
		External:        external,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(contextMoqParam, external)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedActions.RemoveCalls())
func (mock *ActionsMock) RemoveCalls() []struct {
	ContextMoqParam context.Context
	External        id.External
} {
	var calls []struct {
		ContextMoqParam context.Context
		External        id.External
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ActionsMock) Update(contextMoqParam context.Context, store Store) error {
	if mock.UpdateFunc == nil {
		panic("ActionsMock.UpdateFunc: method is nil but Actions.Update was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Store           Store
	}{
		ContextMoqParam: contextMoqParam,
		Store:           store,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(contextMoqParam, store)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedActions.UpdateCalls())
func (mock *ActionsMock) UpdateCalls() []struct {
	ContextMoqParam context.Context
	Store           Store
} {
	var calls []struct {
		ContextMoqParam context.Context
		Store           Store
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

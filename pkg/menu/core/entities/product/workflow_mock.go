// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package product

import (
	"context"
	"gomies/pkg/sdk/types"
	"gomies/pkg/stocking/core/entities/stock"
	"sync"
)

// Ensure, that WorkflowMock does implement Workflow.
// If this is not the case, regenerate this file with moq.
var _ Workflow = &WorkflowMock{}

// WorkflowMock is a mock implementation of Workflow.
//
// 	func TestSomethingThatUsesWorkflow(t *testing.T) {
//
// 		// make and configure a mocked Workflow
// 		mockedWorkflow := &WorkflowMock{
// 			AddToStockFunc: func(ctx context.Context, mov stock.Movement) (stock.Movement, error) {
// 				panic("mock out the AddToStock method")
// 			},
// 			GetFunc: func(ctx context.Context, key Key) (Product, error) {
// 				panic("mock out the Get method")
// 			},
// 			ListFunc: func(ctx context.Context, productFilter Filter) ([]Product, error) {
// 				panic("mock out the List method")
// 			},
// 			ListStockFunc: func(ctx context.Context, stockFilter stock.Filter) ([]stock.Movement, error) {
// 				panic("mock out the ListStock method")
// 			},
// 			RemoveFunc: func(ctx context.Context, key Key) error {
// 				panic("mock out the Remove method")
// 			},
// 			RemoveFromStockFunc: func(ctx context.Context, movementID types.External) error {
// 				panic("mock out the RemoveFromStock method")
// 			},
// 			SaveFunc: func(ctx context.Context, prd Product, flag ...types.WritingFlag) (Product, error) {
// 				panic("mock out the Save method")
// 			},
// 		}
//
// 		// use mockedWorkflow in code that requires Workflow
// 		// and then make assertions.
//
// 	}
type WorkflowMock struct {
	// AddToStockFunc mocks the AddToStock method.
	AddToStockFunc func(ctx context.Context, mov stock.Movement) (stock.Movement, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, key Key) (Product, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, productFilter Filter) ([]Product, error)

	// ListStockFunc mocks the ListStock method.
	ListStockFunc func(ctx context.Context, stockFilter stock.Filter) ([]stock.Movement, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, key Key) error

	// RemoveFromStockFunc mocks the RemoveFromStock method.
	RemoveFromStockFunc func(ctx context.Context, movementID types.External) error

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, prd Product, flag ...types.WritingFlag) (Product, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddToStock holds details about calls to the AddToStock method.
		AddToStock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Mov is the mov argument value.
			Mov stock.Movement
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductFilter is the productFilter argument value.
			ProductFilter Filter
		}
		// ListStock holds details about calls to the ListStock method.
		ListStock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StockFilter is the stockFilter argument value.
			StockFilter stock.Filter
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// RemoveFromStock holds details about calls to the RemoveFromStock method.
		RemoveFromStock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MovementID is the movementID argument value.
			MovementID types.External
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prd is the prd argument value.
			Prd Product
			// Flag is the flag argument value.
			Flag []types.WritingFlag
		}
	}
	lockAddToStock      sync.RWMutex
	lockGet             sync.RWMutex
	lockList            sync.RWMutex
	lockListStock       sync.RWMutex
	lockRemove          sync.RWMutex
	lockRemoveFromStock sync.RWMutex
	lockSave            sync.RWMutex
}

// AddToStock calls AddToStockFunc.
func (mock *WorkflowMock) AddToStock(ctx context.Context, mov stock.Movement) (stock.Movement, error) {
	if mock.AddToStockFunc == nil {
		panic("WorkflowMock.AddToStockFunc: method is nil but Workflow.AddToStock was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Mov stock.Movement
	}{
		Ctx: ctx,
		Mov: mov,
	}
	mock.lockAddToStock.Lock()
	mock.calls.AddToStock = append(mock.calls.AddToStock, callInfo)
	mock.lockAddToStock.Unlock()
	return mock.AddToStockFunc(ctx, mov)
}

// AddToStockCalls gets all the calls that were made to AddToStock.
// Check the length with:
//     len(mockedWorkflow.AddToStockCalls())
func (mock *WorkflowMock) AddToStockCalls() []struct {
	Ctx context.Context
	Mov stock.Movement
} {
	var calls []struct {
		Ctx context.Context
		Mov stock.Movement
	}
	mock.lockAddToStock.RLock()
	calls = mock.calls.AddToStock
	mock.lockAddToStock.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *WorkflowMock) Get(ctx context.Context, key Key) (Product, error) {
	if mock.GetFunc == nil {
		panic("WorkflowMock.GetFunc: method is nil but Workflow.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedWorkflow.GetCalls())
func (mock *WorkflowMock) GetCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *WorkflowMock) List(ctx context.Context, productFilter Filter) ([]Product, error) {
	if mock.ListFunc == nil {
		panic("WorkflowMock.ListFunc: method is nil but Workflow.List was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ProductFilter Filter
	}{
		Ctx:           ctx,
		ProductFilter: productFilter,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, productFilter)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedWorkflow.ListCalls())
func (mock *WorkflowMock) ListCalls() []struct {
	Ctx           context.Context
	ProductFilter Filter
} {
	var calls []struct {
		Ctx           context.Context
		ProductFilter Filter
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListStock calls ListStockFunc.
func (mock *WorkflowMock) ListStock(ctx context.Context, stockFilter stock.Filter) ([]stock.Movement, error) {
	if mock.ListStockFunc == nil {
		panic("WorkflowMock.ListStockFunc: method is nil but Workflow.ListStock was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		StockFilter stock.Filter
	}{
		Ctx:         ctx,
		StockFilter: stockFilter,
	}
	mock.lockListStock.Lock()
	mock.calls.ListStock = append(mock.calls.ListStock, callInfo)
	mock.lockListStock.Unlock()
	return mock.ListStockFunc(ctx, stockFilter)
}

// ListStockCalls gets all the calls that were made to ListStock.
// Check the length with:
//     len(mockedWorkflow.ListStockCalls())
func (mock *WorkflowMock) ListStockCalls() []struct {
	Ctx         context.Context
	StockFilter stock.Filter
} {
	var calls []struct {
		Ctx         context.Context
		StockFilter stock.Filter
	}
	mock.lockListStock.RLock()
	calls = mock.calls.ListStock
	mock.lockListStock.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *WorkflowMock) Remove(ctx context.Context, key Key) error {
	if mock.RemoveFunc == nil {
		panic("WorkflowMock.RemoveFunc: method is nil but Workflow.Remove was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, key)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedWorkflow.RemoveCalls())
func (mock *WorkflowMock) RemoveCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// RemoveFromStock calls RemoveFromStockFunc.
func (mock *WorkflowMock) RemoveFromStock(ctx context.Context, movementID types.External) error {
	if mock.RemoveFromStockFunc == nil {
		panic("WorkflowMock.RemoveFromStockFunc: method is nil but Workflow.RemoveFromStock was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MovementID types.External
	}{
		Ctx:        ctx,
		MovementID: movementID,
	}
	mock.lockRemoveFromStock.Lock()
	mock.calls.RemoveFromStock = append(mock.calls.RemoveFromStock, callInfo)
	mock.lockRemoveFromStock.Unlock()
	return mock.RemoveFromStockFunc(ctx, movementID)
}

// RemoveFromStockCalls gets all the calls that were made to RemoveFromStock.
// Check the length with:
//     len(mockedWorkflow.RemoveFromStockCalls())
func (mock *WorkflowMock) RemoveFromStockCalls() []struct {
	Ctx        context.Context
	MovementID types.External
} {
	var calls []struct {
		Ctx        context.Context
		MovementID types.External
	}
	mock.lockRemoveFromStock.RLock()
	calls = mock.calls.RemoveFromStock
	mock.lockRemoveFromStock.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *WorkflowMock) Save(ctx context.Context, prd Product, flag ...types.WritingFlag) (Product, error) {
	if mock.SaveFunc == nil {
		panic("WorkflowMock.SaveFunc: method is nil but Workflow.Save was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Prd  Product
		Flag []types.WritingFlag
	}{
		Ctx:  ctx,
		Prd:  prd,
		Flag: flag,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, prd, flag...)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedWorkflow.SaveCalls())
func (mock *WorkflowMock) SaveCalls() []struct {
	Ctx  context.Context
	Prd  Product
	Flag []types.WritingFlag
} {
	var calls []struct {
		Ctx  context.Context
		Prd  Product
		Flag []types.WritingFlag
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

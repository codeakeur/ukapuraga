// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: menu/menu.proto

package menu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MenuClient is the client API for Menu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuClient interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error)
	GetProductNameById(ctx context.Context, in *GetProductNameByIdRequest, opts ...grpc.CallOption) (*GetProductNameByIdResponse, error)
	GetProductByCode(ctx context.Context, in *GetProductByCodeRequest, opts ...grpc.CallOption) (*GetProductByCodeResponse, error)
	GetProductBalance(ctx context.Context, in *GetProductBalanceRequest, opts ...grpc.CallOption) (*GetProductBalanceResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveProduct(ctx context.Context, in *RemoveProductRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateMovement(ctx context.Context, in *CreateMovementRequest, opts ...grpc.CallOption) (*CreateMovementResponse, error)
	ListMovements(ctx context.Context, in *ListMovementsRequest, opts ...grpc.CallOption) (*ListMovementsResponse, error)
	RemoveMovement(ctx context.Context, in *RemoveMovementRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateIngredient(ctx context.Context, in *CreateIngredientRequest, opts ...grpc.CallOption) (*CreateIngredientResponse, error)
	ListIngredients(ctx context.Context, in *ListIngredientsRequest, opts ...grpc.CallOption) (*ListIngredientsResponse, error)
	RemoveIngredient(ctx context.Context, in *RemoveIngredientRequest, opts ...grpc.CallOption) (*Empty, error)
}

type menuClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuClient(cc grpc.ClientConnInterface) MenuClient {
	return &menuClient{cc}
}

func (c *menuClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error) {
	out := new(GetProductByIdResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/GetProductById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) GetProductNameById(ctx context.Context, in *GetProductNameByIdRequest, opts ...grpc.CallOption) (*GetProductNameByIdResponse, error) {
	out := new(GetProductNameByIdResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/GetProductNameById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) GetProductByCode(ctx context.Context, in *GetProductByCodeRequest, opts ...grpc.CallOption) (*GetProductByCodeResponse, error) {
	out := new(GetProductByCodeResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/GetProductByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) GetProductBalance(ctx context.Context, in *GetProductBalanceRequest, opts ...grpc.CallOption) (*GetProductBalanceResponse, error) {
	out := new(GetProductBalanceResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/GetProductBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/menu.Menu/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) RemoveProduct(ctx context.Context, in *RemoveProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/menu.Menu/RemoveProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) CreateMovement(ctx context.Context, in *CreateMovementRequest, opts ...grpc.CallOption) (*CreateMovementResponse, error) {
	out := new(CreateMovementResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/CreateMovement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) ListMovements(ctx context.Context, in *ListMovementsRequest, opts ...grpc.CallOption) (*ListMovementsResponse, error) {
	out := new(ListMovementsResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/ListMovements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) RemoveMovement(ctx context.Context, in *RemoveMovementRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/menu.Menu/RemoveMovement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) CreateIngredient(ctx context.Context, in *CreateIngredientRequest, opts ...grpc.CallOption) (*CreateIngredientResponse, error) {
	out := new(CreateIngredientResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/CreateIngredient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) ListIngredients(ctx context.Context, in *ListIngredientsRequest, opts ...grpc.CallOption) (*ListIngredientsResponse, error) {
	out := new(ListIngredientsResponse)
	err := c.cc.Invoke(ctx, "/menu.Menu/ListIngredients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) RemoveIngredient(ctx context.Context, in *RemoveIngredientRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/menu.Menu/RemoveIngredient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServer is the server API for Menu service.
// All implementations must embed UnimplementedMenuServer
// for forward compatibility
type MenuServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	GetProductById(context.Context, *GetProductByIdRequest) (*GetProductByIdResponse, error)
	GetProductNameById(context.Context, *GetProductNameByIdRequest) (*GetProductNameByIdResponse, error)
	GetProductByCode(context.Context, *GetProductByCodeRequest) (*GetProductByCodeResponse, error)
	GetProductBalance(context.Context, *GetProductBalanceRequest) (*GetProductBalanceResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*Empty, error)
	RemoveProduct(context.Context, *RemoveProductRequest) (*Empty, error)
	CreateMovement(context.Context, *CreateMovementRequest) (*CreateMovementResponse, error)
	ListMovements(context.Context, *ListMovementsRequest) (*ListMovementsResponse, error)
	RemoveMovement(context.Context, *RemoveMovementRequest) (*Empty, error)
	CreateIngredient(context.Context, *CreateIngredientRequest) (*CreateIngredientResponse, error)
	ListIngredients(context.Context, *ListIngredientsRequest) (*ListIngredientsResponse, error)
	RemoveIngredient(context.Context, *RemoveIngredientRequest) (*Empty, error)
	mustEmbedUnimplementedMenuServer()
}

// UnimplementedMenuServer must be embedded to have forward compatible implementations.
type UnimplementedMenuServer struct {
}

func (UnimplementedMenuServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedMenuServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedMenuServer) GetProductById(context.Context, *GetProductByIdRequest) (*GetProductByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedMenuServer) GetProductNameById(context.Context, *GetProductNameByIdRequest) (*GetProductNameByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductNameById not implemented")
}
func (UnimplementedMenuServer) GetProductByCode(context.Context, *GetProductByCodeRequest) (*GetProductByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByCode not implemented")
}
func (UnimplementedMenuServer) GetProductBalance(context.Context, *GetProductBalanceRequest) (*GetProductBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBalance not implemented")
}
func (UnimplementedMenuServer) UpdateProduct(context.Context, *UpdateProductRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedMenuServer) RemoveProduct(context.Context, *RemoveProductRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProduct not implemented")
}
func (UnimplementedMenuServer) CreateMovement(context.Context, *CreateMovementRequest) (*CreateMovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovement not implemented")
}
func (UnimplementedMenuServer) ListMovements(context.Context, *ListMovementsRequest) (*ListMovementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovements not implemented")
}
func (UnimplementedMenuServer) RemoveMovement(context.Context, *RemoveMovementRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMovement not implemented")
}
func (UnimplementedMenuServer) CreateIngredient(context.Context, *CreateIngredientRequest) (*CreateIngredientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngredient not implemented")
}
func (UnimplementedMenuServer) ListIngredients(context.Context, *ListIngredientsRequest) (*ListIngredientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIngredients not implemented")
}
func (UnimplementedMenuServer) RemoveIngredient(context.Context, *RemoveIngredientRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIngredient not implemented")
}
func (UnimplementedMenuServer) mustEmbedUnimplementedMenuServer() {}

// UnsafeMenuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServer will
// result in compilation errors.
type UnsafeMenuServer interface {
	mustEmbedUnimplementedMenuServer()
}

func RegisterMenuServer(s grpc.ServiceRegistrar, srv MenuServer) {
	s.RegisterService(&Menu_ServiceDesc, srv)
}

func _Menu_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/GetProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).GetProductById(ctx, req.(*GetProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_GetProductNameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductNameByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).GetProductNameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/GetProductNameById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).GetProductNameById(ctx, req.(*GetProductNameByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_GetProductByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).GetProductByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/GetProductByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).GetProductByCode(ctx, req.(*GetProductByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_GetProductBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).GetProductBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/GetProductBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).GetProductBalance(ctx, req.(*GetProductBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_RemoveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).RemoveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/RemoveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).RemoveProduct(ctx, req.(*RemoveProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_CreateMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).CreateMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/CreateMovement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).CreateMovement(ctx, req.(*CreateMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_ListMovements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMovementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).ListMovements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/ListMovements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).ListMovements(ctx, req.(*ListMovementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_RemoveMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).RemoveMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/RemoveMovement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).RemoveMovement(ctx, req.(*RemoveMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_CreateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).CreateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/CreateIngredient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).CreateIngredient(ctx, req.(*CreateIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_ListIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIngredientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).ListIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/ListIngredients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).ListIngredients(ctx, req.(*ListIngredientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_RemoveIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).RemoveIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/RemoveIngredient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).RemoveIngredient(ctx, req.(*RemoveIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Menu_ServiceDesc is the grpc.ServiceDesc for Menu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Menu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "menu.Menu",
	HandlerType: (*MenuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _Menu_CreateProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _Menu_ListProducts_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _Menu_GetProductById_Handler,
		},
		{
			MethodName: "GetProductNameById",
			Handler:    _Menu_GetProductNameById_Handler,
		},
		{
			MethodName: "GetProductByCode",
			Handler:    _Menu_GetProductByCode_Handler,
		},
		{
			MethodName: "GetProductBalance",
			Handler:    _Menu_GetProductBalance_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Menu_UpdateProduct_Handler,
		},
		{
			MethodName: "RemoveProduct",
			Handler:    _Menu_RemoveProduct_Handler,
		},
		{
			MethodName: "CreateMovement",
			Handler:    _Menu_CreateMovement_Handler,
		},
		{
			MethodName: "ListMovements",
			Handler:    _Menu_ListMovements_Handler,
		},
		{
			MethodName: "RemoveMovement",
			Handler:    _Menu_RemoveMovement_Handler,
		},
		{
			MethodName: "CreateIngredient",
			Handler:    _Menu_CreateIngredient_Handler,
		},
		{
			MethodName: "ListIngredients",
			Handler:    _Menu_ListIngredients_Handler,
		},
		{
			MethodName: "RemoveIngredient",
			Handler:    _Menu_RemoveIngredient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "menu/menu.proto",
}

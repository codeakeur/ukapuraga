// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package store

import (
	"context"
	"gomies/app/sdk/types"
	"sync"
)

// Ensure, that ActionsMock does implement Actions.
// If this is not the case, regenerate this file with moq.
var _ Actions = &ActionsMock{}

// ActionsMock is a mock implementation of Actions.
//
// 	func TestSomethingThatUsesActions(t *testing.T) {
//
// 		// make and configure a mocked Actions
// 		mockedActions := &ActionsMock{
// 			CreateStoreFunc: func(ctx context.Context, st Store) (Store, error) {
// 				panic("mock out the CreateStore method")
// 			},
// 			GetStoreFunc: func(ctx context.Context, storeID Key) (Store, error) {
// 				panic("mock out the GetStore method")
// 			},
// 			ListPreferencesFunc: func(ctx context.Context, storeKey Key, modules ...string) (types.Preferences, error) {
// 				panic("mock out the ListPreferences method")
// 			},
// 			ListStoreFunc: func(ctx context.Context, storeFilter Filter) ([]Store, int, error) {
// 				panic("mock out the ListStore method")
// 			},
// 			RemoveStoreFunc: func(ctx context.Context, key Key) error {
// 				panic("mock out the RemoveStore method")
// 			},
// 			SavePreferencesFunc: func(ctx context.Context, storeKey Key, pref types.Preferences) (types.Preferences, error) {
// 				panic("mock out the SavePreferences method")
// 			},
// 			UpdateStoreFunc: func(ctx context.Context, st Store) error {
// 				panic("mock out the UpdateStore method")
// 			},
// 		}
//
// 		// use mockedActions in code that requires Actions
// 		// and then make assertions.
//
// 	}
type ActionsMock struct {
	// CreateStoreFunc mocks the CreateStore method.
	CreateStoreFunc func(ctx context.Context, st Store) (Store, error)

	// GetStoreFunc mocks the GetStore method.
	GetStoreFunc func(ctx context.Context, storeID Key) (Store, error)

	// ListPreferencesFunc mocks the ListPreferences method.
	ListPreferencesFunc func(ctx context.Context, storeKey Key, modules ...string) (types.Preferences, error)

	// ListStoreFunc mocks the ListStore method.
	ListStoreFunc func(ctx context.Context, storeFilter Filter) ([]Store, int, error)

	// RemoveStoreFunc mocks the RemoveStore method.
	RemoveStoreFunc func(ctx context.Context, key Key) error

	// SavePreferencesFunc mocks the SavePreferences method.
	SavePreferencesFunc func(ctx context.Context, storeKey Key, pref types.Preferences) (types.Preferences, error)

	// UpdateStoreFunc mocks the UpdateStore method.
	UpdateStoreFunc func(ctx context.Context, st Store) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateStore holds details about calls to the CreateStore method.
		CreateStore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// St is the st argument value.
			St Store
		}
		// GetStore holds details about calls to the GetStore method.
		GetStore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StoreID is the storeID argument value.
			StoreID Key
		}
		// ListPreferences holds details about calls to the ListPreferences method.
		ListPreferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StoreKey is the storeKey argument value.
			StoreKey Key
			// Modules is the modules argument value.
			Modules []string
		}
		// ListStore holds details about calls to the ListStore method.
		ListStore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StoreFilter is the storeFilter argument value.
			StoreFilter Filter
		}
		// RemoveStore holds details about calls to the RemoveStore method.
		RemoveStore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// SavePreferences holds details about calls to the SavePreferences method.
		SavePreferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StoreKey is the storeKey argument value.
			StoreKey Key
			// Pref is the pref argument value.
			Pref types.Preferences
		}
		// UpdateStore holds details about calls to the UpdateStore method.
		UpdateStore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// St is the st argument value.
			St Store
		}
	}
	lockCreateStore     sync.RWMutex
	lockGetStore        sync.RWMutex
	lockListPreferences sync.RWMutex
	lockListStore       sync.RWMutex
	lockRemoveStore     sync.RWMutex
	lockSavePreferences sync.RWMutex
	lockUpdateStore     sync.RWMutex
}

// CreateStore calls CreateStoreFunc.
func (mock *ActionsMock) CreateStore(ctx context.Context, st Store) (Store, error) {
	if mock.CreateStoreFunc == nil {
		panic("ActionsMock.CreateStoreFunc: method is nil but Actions.CreateStore was just called")
	}
	callInfo := struct {
		Ctx context.Context
		St  Store
	}{
		Ctx: ctx,
		St:  st,
	}
	mock.lockCreateStore.Lock()
	mock.calls.CreateStore = append(mock.calls.CreateStore, callInfo)
	mock.lockCreateStore.Unlock()
	return mock.CreateStoreFunc(ctx, st)
}

// CreateStoreCalls gets all the calls that were made to CreateStore.
// Check the length with:
//     len(mockedActions.CreateStoreCalls())
func (mock *ActionsMock) CreateStoreCalls() []struct {
	Ctx context.Context
	St  Store
} {
	var calls []struct {
		Ctx context.Context
		St  Store
	}
	mock.lockCreateStore.RLock()
	calls = mock.calls.CreateStore
	mock.lockCreateStore.RUnlock()
	return calls
}

// GetStore calls GetStoreFunc.
func (mock *ActionsMock) GetStore(ctx context.Context, storeID Key) (Store, error) {
	if mock.GetStoreFunc == nil {
		panic("ActionsMock.GetStoreFunc: method is nil but Actions.GetStore was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		StoreID Key
	}{
		Ctx:     ctx,
		StoreID: storeID,
	}
	mock.lockGetStore.Lock()
	mock.calls.GetStore = append(mock.calls.GetStore, callInfo)
	mock.lockGetStore.Unlock()
	return mock.GetStoreFunc(ctx, storeID)
}

// GetStoreCalls gets all the calls that were made to GetStore.
// Check the length with:
//     len(mockedActions.GetStoreCalls())
func (mock *ActionsMock) GetStoreCalls() []struct {
	Ctx     context.Context
	StoreID Key
} {
	var calls []struct {
		Ctx     context.Context
		StoreID Key
	}
	mock.lockGetStore.RLock()
	calls = mock.calls.GetStore
	mock.lockGetStore.RUnlock()
	return calls
}

// ListPreferences calls ListPreferencesFunc.
func (mock *ActionsMock) ListPreferences(ctx context.Context, storeKey Key, modules ...string) (types.Preferences, error) {
	if mock.ListPreferencesFunc == nil {
		panic("ActionsMock.ListPreferencesFunc: method is nil but Actions.ListPreferences was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		StoreKey Key
		Modules  []string
	}{
		Ctx:      ctx,
		StoreKey: storeKey,
		Modules:  modules,
	}
	mock.lockListPreferences.Lock()
	mock.calls.ListPreferences = append(mock.calls.ListPreferences, callInfo)
	mock.lockListPreferences.Unlock()
	return mock.ListPreferencesFunc(ctx, storeKey, modules...)
}

// ListPreferencesCalls gets all the calls that were made to ListPreferences.
// Check the length with:
//     len(mockedActions.ListPreferencesCalls())
func (mock *ActionsMock) ListPreferencesCalls() []struct {
	Ctx      context.Context
	StoreKey Key
	Modules  []string
} {
	var calls []struct {
		Ctx      context.Context
		StoreKey Key
		Modules  []string
	}
	mock.lockListPreferences.RLock()
	calls = mock.calls.ListPreferences
	mock.lockListPreferences.RUnlock()
	return calls
}

// ListStore calls ListStoreFunc.
func (mock *ActionsMock) ListStore(ctx context.Context, storeFilter Filter) ([]Store, int, error) {
	if mock.ListStoreFunc == nil {
		panic("ActionsMock.ListStoreFunc: method is nil but Actions.ListStore was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		StoreFilter Filter
	}{
		Ctx:         ctx,
		StoreFilter: storeFilter,
	}
	mock.lockListStore.Lock()
	mock.calls.ListStore = append(mock.calls.ListStore, callInfo)
	mock.lockListStore.Unlock()
	return mock.ListStoreFunc(ctx, storeFilter)
}

// ListStoreCalls gets all the calls that were made to ListStore.
// Check the length with:
//     len(mockedActions.ListStoreCalls())
func (mock *ActionsMock) ListStoreCalls() []struct {
	Ctx         context.Context
	StoreFilter Filter
} {
	var calls []struct {
		Ctx         context.Context
		StoreFilter Filter
	}
	mock.lockListStore.RLock()
	calls = mock.calls.ListStore
	mock.lockListStore.RUnlock()
	return calls
}

// RemoveStore calls RemoveStoreFunc.
func (mock *ActionsMock) RemoveStore(ctx context.Context, key Key) error {
	if mock.RemoveStoreFunc == nil {
		panic("ActionsMock.RemoveStoreFunc: method is nil but Actions.RemoveStore was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockRemoveStore.Lock()
	mock.calls.RemoveStore = append(mock.calls.RemoveStore, callInfo)
	mock.lockRemoveStore.Unlock()
	return mock.RemoveStoreFunc(ctx, key)
}

// RemoveStoreCalls gets all the calls that were made to RemoveStore.
// Check the length with:
//     len(mockedActions.RemoveStoreCalls())
func (mock *ActionsMock) RemoveStoreCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockRemoveStore.RLock()
	calls = mock.calls.RemoveStore
	mock.lockRemoveStore.RUnlock()
	return calls
}

// SavePreferences calls SavePreferencesFunc.
func (mock *ActionsMock) SavePreferences(ctx context.Context, storeKey Key, pref types.Preferences) (types.Preferences, error) {
	if mock.SavePreferencesFunc == nil {
		panic("ActionsMock.SavePreferencesFunc: method is nil but Actions.SavePreferences was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		StoreKey Key
		Pref     types.Preferences
	}{
		Ctx:      ctx,
		StoreKey: storeKey,
		Pref:     pref,
	}
	mock.lockSavePreferences.Lock()
	mock.calls.SavePreferences = append(mock.calls.SavePreferences, callInfo)
	mock.lockSavePreferences.Unlock()
	return mock.SavePreferencesFunc(ctx, storeKey, pref)
}

// SavePreferencesCalls gets all the calls that were made to SavePreferences.
// Check the length with:
//     len(mockedActions.SavePreferencesCalls())
func (mock *ActionsMock) SavePreferencesCalls() []struct {
	Ctx      context.Context
	StoreKey Key
	Pref     types.Preferences
} {
	var calls []struct {
		Ctx      context.Context
		StoreKey Key
		Pref     types.Preferences
	}
	mock.lockSavePreferences.RLock()
	calls = mock.calls.SavePreferences
	mock.lockSavePreferences.RUnlock()
	return calls
}

// UpdateStore calls UpdateStoreFunc.
func (mock *ActionsMock) UpdateStore(ctx context.Context, st Store) error {
	if mock.UpdateStoreFunc == nil {
		panic("ActionsMock.UpdateStoreFunc: method is nil but Actions.UpdateStore was just called")
	}
	callInfo := struct {
		Ctx context.Context
		St  Store
	}{
		Ctx: ctx,
		St:  st,
	}
	mock.lockUpdateStore.Lock()
	mock.calls.UpdateStore = append(mock.calls.UpdateStore, callInfo)
	mock.lockUpdateStore.Unlock()
	return mock.UpdateStoreFunc(ctx, st)
}

// UpdateStoreCalls gets all the calls that were made to UpdateStore.
// Check the length with:
//     len(mockedActions.UpdateStoreCalls())
func (mock *ActionsMock) UpdateStoreCalls() []struct {
	Ctx context.Context
	St  Store
} {
	var calls []struct {
		Ctx context.Context
		St  Store
	}
	mock.lockUpdateStore.RLock()
	calls = mock.calls.UpdateStore
	mock.lockUpdateStore.RUnlock()
	return calls
}

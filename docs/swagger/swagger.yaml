definitions:
  handler.Error:
    properties:
      code:
        type: string
      message:
        type: string
      target: {}
    type: object
  handler.Response:
    properties:
      data: {}
      error: {}
    type: object
  v1.CreateIngredientRequest:
    properties:
      ingredient_id:
        type: string
      optional:
        type: boolean
      quantity:
        type: integer
    type: object
  v1.CreateMovementRequest:
    properties:
      agent_id:
        description: AgentID is the entity from this resource came from or is going
          to
        type: string
      date:
        description: Date is when the object got into the stock effectively
        type: string
      paid_value:
        description: PaidValue is how much was paid/received for this resource
        type: integer
      quantity:
        description: Quantity is the amount being inserted or removed from this stock
        type: integer
      type:
        description: Type points out if this movement is input or output
        type: integer
    type: object
  v1.CreateProductRequest:
    properties:
      code:
        description: Code represents how the store's crew call this product internally
        type: string
      cost_price:
        description: CostPrice is how much the store pays to make or store this product
        type: integer
      location:
        description: Location is a brief description of where this stock is located
        type: string
      maximum_quantity:
        description: MaximumQuantity is how many unities of this resource the stock
          can support
        type: integer
      minimum_quantity:
        description: MinimumQuantity is the lowest quantity of this resource the stock
          can have
        type: integer
      minimum_sale:
        description: MinimumSale is the lowest number of unities of this product that
          can be sold
        type: integer
      name:
        description: |-
          Name is the official name of the product, not exactly the name that the customer sees, but indeed the name
          shown in fiscal documents
        type: string
      sale_price:
        description: Price is how much the customer pays for this product
        type: integer
      sale_unit:
        description: Unit is the measure type that this product is sold
        type: string
      type:
        description: Type is the type of the product
        type: integer
    type: object
  v1.CreateProductResponse:
    properties:
      id:
        type: string
    type: object
  v1.GetProductBalanceResponse:
    properties:
      balance:
        description: Balance is the amount stocked of this product
        type: integer
    type: object
  v1.GetProductByKeyResponse:
    properties:
      code:
        description: Code represents how the store's crew call this product internally
        type: string
      cost_price:
        description: CostPrice is how much the store pays to make or store this product
        type: integer
      id:
        description: ID is the unique identifier of this product
        type: string
      location:
        description: Location is a brief description of where this stock is located
        type: string
      maximum_quantity:
        description: MaximumQuantity is how many unities of this resource the stock
          can support
        type: integer
      minimum_quantity:
        description: MinimumQuantity is the lowest quantity of this resource the stock
          can have
        type: integer
      minimum_sale:
        description: MinimumSale is the lowest number of unities of this product that
          can be sold
        type: integer
      name:
        description: |-
          Name is the official name of the product, not exactly the name that the customer sees, but indeed the name
          shown in fiscal documents
        type: string
      sale_price:
        description: Price is how much the customer pays for this product
        type: integer
      sale_unit:
        description: Unit is the measure type that this product is sold
        type: string
      type:
        description: Type is the type of the product
        type: integer
    type: object
  v1.GetProductNameResponse:
    properties:
      name:
        description: |-
          Name is the official name of the product, not exactly the name that the customer sees, but indeed the name
          shown in fiscal documents
        type: string
    type: object
  v1.IngredientAdditionResult:
    properties:
      id:
        type: string
    type: object
  v1.ListMovementsResponse:
    properties:
      agent_id:
        description: AgentID is the entity from this resource came from or is going
          to
        type: string
      date:
        description: Date is when the object got into the stock effectively
        type: string
      id:
        description: ID is the unique identifier of this movement
        type: string
      paid_value:
        description: PaidValue is how much was paid/received for this resource
        type: integer
      product_id:
        description: ProductID is an identifier for the stock this movement references
          to
        type: string
      quantity:
        description: Quantity is the amount being inserted or removed from this stock
        type: integer
      type:
        description: Type points out if this movement is input or output
        type: integer
    type: object
  v1.ListProductsResponse:
    properties:
      code:
        description: Code represents how the store's crew call this product internally
        type: string
      id:
        description: ID is the unique identifier of this product
        type: string
      name:
        description: |-
          Name is the official name of the product, not exactly the name that the customer sees, but indeed the name
          shown in fiscal documents
        type: string
      type:
        description: Type is the type of the product
        type: integer
    type: object
  v1.ListRunningOutProductsResponse:
    properties:
      code:
        description: Code represents how the store's crew call this product internally
        type: string
      id:
        description: ID is the unique identifier of this product
        type: string
      maximum_quantity:
        description: MaximumQuantity is how many unities of this resource the stock
          can support
        type: integer
      minimum_quantity:
        description: MinimumQuantity is the lowest quantity of this resource the stock
          can have
        type: integer
      name:
        description: |-
          Name is the official name of the product, not exactly the name that the customer sees, but indeed the name
          shown in fiscal documents
        type: string
      sale_unit:
        description: Unit is the measure type that this product is sold
        type: string
      type:
        description: Type is the type of the product
        type: integer
    type: object
  v1.MovementAdditionResult:
    properties:
      balance:
        description: Quantity is the amount being inserted or removed from this stock
        type: integer
      id:
        type: string
    type: object
  v1.UpdateProductRequest:
    properties:
      code:
        description: Code represents how the store's crew call this product internally
        type: string
      cost_price:
        description: CostPrice is how much the store pays to make or store this product
        type: integer
      location:
        description: Location is a brief description of where this stock is located
        type: string
      maximum_quantity:
        description: MaximumQuantity is how many unities of this resource the stock
          can support
        type: integer
      minimum_quantity:
        description: MinimumQuantity is the lowest quantity of this resource the stock
          can have
        type: integer
      minimum_sale:
        description: MinimumSale is the lowest number of unities of this product that
          can be sold
        type: integer
      name:
        description: |-
          Name is the official name of the product, not exactly the name that the customer sees, but indeed the name
          shown in fiscal documents
        type: string
      sale_price:
        description: Price is how much the customer pays for this product
        type: integer
      sale_unit:
        description: Unit is the measure type that this product is sold
        type: string
      type:
        description: Type is the type of the product
        type: integer
    type: object
info:
  contact: {}
  description: An API wrapping all functionalities of the ordering and menu services
    of Comies
  title: Comies Backend API
  version: "1.0"
paths:
  /menu/products:
    get:
      description: Fetches a product by one of itd unique keys (id or code).
      parameters:
      - description: Adds a filter looking for the products codes
        in: query
        name: code
        type: string
      - description: Adds a filter looking for the products names
        in: query
        name: name
        type: string
      - description: Adds a filter looking for the products types
        in: query
        name: type
        type: integer
      - description: Searches products running out of stock only
        in: query
        name: out
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/v1.ListRunningOutProductsResponse'
                  type: array
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Fetches a product
      tags:
      - Product
    post:
      description: Adds a product to the store's menu.
      parameters:
      - description: The properties to define the product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/v1.CreateProductRequest'
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.CreateProductResponse'
              type: object
        "412":
          description: 'PRODUCT_CODE_ALREADY_EXISTS: Happens if the code provided
            is assigned to another product already'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "422":
          description: 'PRODUCT_INVALID_NAME: Happens if the product name is not longer
            than 2 and shorter than 60 characters'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Create product
      tags:
      - Product
  /menu/products/{product_id}:
    delete:
      description: removes a product from the store's menu.
      parameters:
      - description: The product ID
        in: path
        name: product_key
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: 'INVALID_ID: Happens if the product id provided is not a valid
            one'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Remove product
      tags:
      - Product
    get:
      description: Fetches a product by one of itd unique keys (id or code).
      parameters:
      - description: The product ID
        in: path
        name: product_key
        type: string
      - description: Toggles if the API should search by code
        in: query
        name: code
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.GetProductByKeyResponse'
              type: object
        "400":
          description: 'INVALID_ID: Happens if the product id provided is not a valid
            one'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "404":
          description: 'PRODUCT_NOT_FOUND: Happens if the product could not be found
            or does not exist'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Fetches a product
      tags:
      - Product
    put:
      description: updates a product to the store's menu.
      parameters:
      - description: The properties to define the product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateProductRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: 'INVALID_ID: Happens if the product id provided is not a valid
            one'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "412":
          description: 'PRODUCT_CODE_ALREADY_EXISTS: Happens if the code provided
            is assigned to another product already'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "422":
          description: 'PRODUCT_INVALID_NAME: Happens if the product name is not longer
            than 2 and shorter than 60 characters'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Updates product
      tags:
      - Product
  /menu/products/{product_id}/ingredients:
    get:
      description: Fetches all product ingredients.
      parameters:
      - description: The product ID
        in: path
        name: product_key
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/v1.ListRunningOutProductsResponse'
                  type: array
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Fetches ingredients
      tags:
      - Product
    post:
      description: Adds an ingredient relation to the store's menu. THe product must
        be of composite type
      parameters:
      - description: The product ID
        in: path
        name: product_key
        type: string
      - description: The properties to define the ingredient
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/v1.CreateIngredientRequest'
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.IngredientAdditionResult'
              type: object
        "400":
          description: 'INVALID_ID: Happens if the product id provided is not a valid
            one'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "412":
          description: 'Possible errors: INGREDIENT_INVALID_INGREDIENT_ID, INGREDIENT_INVALID_PRODUCT_ID,
            INGREDIENT_ZERO_QUANTITY, INGREDIENT_INVALID_PRODUCT_TYPE, INGREDIENT_INVALID_INGREDIENT_TYPE'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Creates ingredient
      tags:
      - Product
  /menu/products/{product_id}/ingredients/{id}:
    delete:
      description: removes an ingredient from the store's menu.
      parameters:
      - description: The product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: The ingredient ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: 'INVALID_ID: Happens if the product id or ingredient provided
            is not a valid one'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Remove ingredient
      tags:
      - Product
  /menu/products/{product_id}/movements:
    get:
      description: Fetches all product movements.
      parameters:
      - description: The product ID
        in: path
        name: product_key
        type: string
      - description: Adds a filter looking for the start date
        in: query
        name: start
        type: string
      - description: Adds a filter looking for the end date
        in: query
        name: end
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/v1.ListMovementsResponse'
                  type: array
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Fetches movements
      tags:
      - Product
    post:
      description: Adds a movement to the store's stock
      parameters:
      - description: The product ID
        in: path
        name: product_key
        type: string
      - description: The properties to define the movement
        in: body
        name: movement
        required: true
        schema:
          $ref: '#/definitions/v1.CreateMovementRequest'
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.MovementAdditionResult'
              type: object
        "400":
          description: 'INVALID_ID: Happens if the product id provided is not a valid
            one'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "412":
          description: 'Possible errors: MOVEMENT_INVALID_PRODUCT_TYPE, PRODUCT_STOCK_EMPTY,
            PRODUCT_STOCK_FULL'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Creates movement
      tags:
      - Product
  /menu/products/{product_id}/movements/{id}:
    delete:
      description: removes a movement from the store's menu.
      parameters:
      - description: The product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: The movement ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: 'INVALID_ID: Happens if the product id or movement provided
            is not a valid one'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Remove movement
      tags:
      - Product
  /menu/products/{product_id}/name:
    get:
      description: Fetches a product name by its id.
      parameters:
      - description: The product ID
        in: path
        name: product_key
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.GetProductNameResponse'
              type: object
        "400":
          description: 'INVALID_ID: Happens if the product id provided is not a valid
            one'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "404":
          description: 'PRODUCT_NOT_FOUND: Happens if the product could not be found
            or does not exist'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Fetches a product
      tags:
      - Product
  /menu/products/{product_id}/stock-balance:
    get:
      description: Fetches a product name by its id.
      parameters:
      - description: The product ID
        in: path
        name: product_key
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.GetProductBalanceResponse'
              type: object
        "400":
          description: 'INVALID_ID: Happens if the product id provided is not a valid
            one'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
        "500":
          description: 'ERR_INTERNAL_SERVER_ERROR: Happens if an unexpected error
            happens on the API side'
          schema:
            allOf:
            - $ref: '#/definitions/handler.Response'
            - properties:
                error:
                  $ref: '#/definitions/handler.Error'
              type: object
      summary: Fetches a product
      tags:
      - Product
swagger: "2.0"

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package product

import (
	"context"
	"sync"
)

// Ensure, that ActionsMock does implement Actions.
// If this is not the case, regenerate this file with moq.
var _ Actions = &ActionsMock{}

// ActionsMock is a mock implementation of Actions.
//
// 	func TestSomethingThatUsesActions(t *testing.T) {
//
// 		// make and configure a mocked Actions
// 		mockedActions := &ActionsMock{
// 			CreateProductFunc: func(ctx context.Context, prd Product) (Product, error) {
// 				panic("mock out the CreateProduct method")
// 			},
// 			GetProductSaleInfoFunc: func(ctx context.Context, key Key) (Sale, error) {
// 				panic("mock out the GetProductSaleInfo method")
// 			},
// 			GetProductsFunc: func(ctx context.Context, key Key) (Product, error) {
// 				panic("mock out the GetProducts method")
// 			},
// 			ListProductsFunc: func(ctx context.Context, productFilter Filter) ([]Product, int, error) {
// 				panic("mock out the ListProducts method")
// 			},
// 			RemoveProductFunc: func(ctx context.Context, key Key) error {
// 				panic("mock out the RemoveProduct method")
// 			},
// 			UpdateProductFunc: func(ctx context.Context, prd Product) error {
// 				panic("mock out the UpdateProduct method")
// 			},
// 		}
//
// 		// use mockedActions in code that requires Actions
// 		// and then make assertions.
//
// 	}
type ActionsMock struct {
	// CreateProductFunc mocks the CreateProduct method.
	CreateProductFunc func(ctx context.Context, prd Product) (Product, error)

	// GetProductSaleInfoFunc mocks the GetProductSaleInfo method.
	GetProductSaleInfoFunc func(ctx context.Context, key Key) (Sale, error)

	// GetProductsFunc mocks the GetProducts method.
	GetProductsFunc func(ctx context.Context, key Key) (Product, error)

	// ListProductsFunc mocks the ListProducts method.
	ListProductsFunc func(ctx context.Context, productFilter Filter) ([]Product, int, error)

	// RemoveProductFunc mocks the RemoveProduct method.
	RemoveProductFunc func(ctx context.Context, key Key) error

	// UpdateProductFunc mocks the UpdateProduct method.
	UpdateProductFunc func(ctx context.Context, prd Product) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateProduct holds details about calls to the CreateProduct method.
		CreateProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prd is the prd argument value.
			Prd Product
		}
		// GetProductSaleInfo holds details about calls to the GetProductSaleInfo method.
		GetProductSaleInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// GetProducts holds details about calls to the GetProducts method.
		GetProducts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// ListProducts holds details about calls to the ListProducts method.
		ListProducts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductFilter is the productFilter argument value.
			ProductFilter Filter
		}
		// RemoveProduct holds details about calls to the RemoveProduct method.
		RemoveProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key Key
		}
		// UpdateProduct holds details about calls to the UpdateProduct method.
		UpdateProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prd is the prd argument value.
			Prd Product
		}
	}
	lockCreateProduct      sync.RWMutex
	lockGetProductSaleInfo sync.RWMutex
	lockGetProducts        sync.RWMutex
	lockListProducts       sync.RWMutex
	lockRemoveProduct      sync.RWMutex
	lockUpdateProduct      sync.RWMutex
}

// CreateProduct calls CreateProductFunc.
func (mock *ActionsMock) CreateProduct(ctx context.Context, prd Product) (Product, error) {
	if mock.CreateProductFunc == nil {
		panic("ActionsMock.CreateProductFunc: method is nil but Actions.CreateProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Prd Product
	}{
		Ctx: ctx,
		Prd: prd,
	}
	mock.lockCreateProduct.Lock()
	mock.calls.CreateProduct = append(mock.calls.CreateProduct, callInfo)
	mock.lockCreateProduct.Unlock()
	return mock.CreateProductFunc(ctx, prd)
}

// CreateProductCalls gets all the calls that were made to CreateProduct.
// Check the length with:
//     len(mockedActions.CreateProductCalls())
func (mock *ActionsMock) CreateProductCalls() []struct {
	Ctx context.Context
	Prd Product
} {
	var calls []struct {
		Ctx context.Context
		Prd Product
	}
	mock.lockCreateProduct.RLock()
	calls = mock.calls.CreateProduct
	mock.lockCreateProduct.RUnlock()
	return calls
}

// GetProductSaleInfo calls GetProductSaleInfoFunc.
func (mock *ActionsMock) GetProductSaleInfo(ctx context.Context, key Key) (Sale, error) {
	if mock.GetProductSaleInfoFunc == nil {
		panic("ActionsMock.GetProductSaleInfoFunc: method is nil but Actions.GetProductSaleInfo was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetProductSaleInfo.Lock()
	mock.calls.GetProductSaleInfo = append(mock.calls.GetProductSaleInfo, callInfo)
	mock.lockGetProductSaleInfo.Unlock()
	return mock.GetProductSaleInfoFunc(ctx, key)
}

// GetProductSaleInfoCalls gets all the calls that were made to GetProductSaleInfo.
// Check the length with:
//     len(mockedActions.GetProductSaleInfoCalls())
func (mock *ActionsMock) GetProductSaleInfoCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockGetProductSaleInfo.RLock()
	calls = mock.calls.GetProductSaleInfo
	mock.lockGetProductSaleInfo.RUnlock()
	return calls
}

// GetProducts calls GetProductsFunc.
func (mock *ActionsMock) GetProducts(ctx context.Context, key Key) (Product, error) {
	if mock.GetProductsFunc == nil {
		panic("ActionsMock.GetProductsFunc: method is nil but Actions.GetProducts was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetProducts.Lock()
	mock.calls.GetProducts = append(mock.calls.GetProducts, callInfo)
	mock.lockGetProducts.Unlock()
	return mock.GetProductsFunc(ctx, key)
}

// GetProductsCalls gets all the calls that were made to GetProducts.
// Check the length with:
//     len(mockedActions.GetProductsCalls())
func (mock *ActionsMock) GetProductsCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockGetProducts.RLock()
	calls = mock.calls.GetProducts
	mock.lockGetProducts.RUnlock()
	return calls
}

// ListProducts calls ListProductsFunc.
func (mock *ActionsMock) ListProducts(ctx context.Context, productFilter Filter) ([]Product, int, error) {
	if mock.ListProductsFunc == nil {
		panic("ActionsMock.ListProductsFunc: method is nil but Actions.ListProducts was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ProductFilter Filter
	}{
		Ctx:           ctx,
		ProductFilter: productFilter,
	}
	mock.lockListProducts.Lock()
	mock.calls.ListProducts = append(mock.calls.ListProducts, callInfo)
	mock.lockListProducts.Unlock()
	return mock.ListProductsFunc(ctx, productFilter)
}

// ListProductsCalls gets all the calls that were made to ListProducts.
// Check the length with:
//     len(mockedActions.ListProductsCalls())
func (mock *ActionsMock) ListProductsCalls() []struct {
	Ctx           context.Context
	ProductFilter Filter
} {
	var calls []struct {
		Ctx           context.Context
		ProductFilter Filter
	}
	mock.lockListProducts.RLock()
	calls = mock.calls.ListProducts
	mock.lockListProducts.RUnlock()
	return calls
}

// RemoveProduct calls RemoveProductFunc.
func (mock *ActionsMock) RemoveProduct(ctx context.Context, key Key) error {
	if mock.RemoveProductFunc == nil {
		panic("ActionsMock.RemoveProductFunc: method is nil but Actions.RemoveProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key Key
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockRemoveProduct.Lock()
	mock.calls.RemoveProduct = append(mock.calls.RemoveProduct, callInfo)
	mock.lockRemoveProduct.Unlock()
	return mock.RemoveProductFunc(ctx, key)
}

// RemoveProductCalls gets all the calls that were made to RemoveProduct.
// Check the length with:
//     len(mockedActions.RemoveProductCalls())
func (mock *ActionsMock) RemoveProductCalls() []struct {
	Ctx context.Context
	Key Key
} {
	var calls []struct {
		Ctx context.Context
		Key Key
	}
	mock.lockRemoveProduct.RLock()
	calls = mock.calls.RemoveProduct
	mock.lockRemoveProduct.RUnlock()
	return calls
}

// UpdateProduct calls UpdateProductFunc.
func (mock *ActionsMock) UpdateProduct(ctx context.Context, prd Product) error {
	if mock.UpdateProductFunc == nil {
		panic("ActionsMock.UpdateProductFunc: method is nil but Actions.UpdateProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Prd Product
	}{
		Ctx: ctx,
		Prd: prd,
	}
	mock.lockUpdateProduct.Lock()
	mock.calls.UpdateProduct = append(mock.calls.UpdateProduct, callInfo)
	mock.lockUpdateProduct.Unlock()
	return mock.UpdateProductFunc(ctx, prd)
}

// UpdateProductCalls gets all the calls that were made to UpdateProduct.
// Check the length with:
//     len(mockedActions.UpdateProductCalls())
func (mock *ActionsMock) UpdateProductCalls() []struct {
	Ctx context.Context
	Prd Product
} {
	var calls []struct {
		Ctx context.Context
		Prd Product
	}
	mock.lockUpdateProduct.RLock()
	calls = mock.calls.UpdateProduct
	mock.lockUpdateProduct.RUnlock()
	return calls
}
